# -*- coding: utf-8 -*-
"""playground V Charters: Value & Org Extraction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17g0PaKdEAgHTYtyzrf1BgnX7cQALNjMb

## Config
"""

#@title ## Settings { run: "auto", vertical-output: true, form-width: "750px", display-mode: "form" }
from parsing import PROF_DATA, clear_prof_data

hyperparameters={}


#@markdown ## - DEMO
upload_enabled = False  #@param {type: "boolean"}

#@markdown ## - Batch
#@markdown - пакетная обработка нескольких уставов из `GoogleDrive/GazpromOil/Charters`   
#@markdown - запись результатов в https://docs.google.com/spreadsheets/d/13Clx3Rzd3BWC2E2b-GzkSLuAeuwNmIYssgir-CCvYHc

run_batch_processing = False  #@param {type: "boolean"}
read_docs_from_google_drive = True  #@param {type: "boolean"}


#@markdown ## - dev
dev_mode = True  #@param {type: "boolean"}
#@markdown - запуск тестов после декларации методов и функций
perform_test_on_small_doc = False  #@param {type: "boolean"}
git_branch = "structured_2" #@param {type:"string"}

#@markdown ## - Embedding module
embeddings_layer='elmo'  #@param ["elmo", "word_emb" ]
database = "news" #@param ["wiki", "twitter", "news"]


hyperparameters['embeddings.layer']=embeddings_layer
hyperparameters ['database']=database
print()

print(str(hyperparameters))

# !gsutil init
# !wget http://x5.ibb.su:10000/upload/elmo_ru-news_wmt11-16_1.5M_steps.tar.gz
# !gsutil cp elmo_ru-news_wmt11-16_1.5M_steps.tar.gz gs://az-nlp

"""## Authenticate on Google and mount Google Drive"""

print(f'dev_mode={dev_mode}')
print(f'run_batch_processing={run_batch_processing}')
if run_batch_processing or dev_mode:

  import gspread
  from google.colab import auth
  from google.colab import drive
  from oauth2client.client import GoogleCredentials

  auth.authenticate_user()
  google_spread = gspread.authorize(GoogleCredentials.get_application_default())

  if read_docs_from_google_drive:
    drive.mount('/content/gdrive', force_remount=True)

"""## Init"""

import tensorflow as tf
import tensorflow_hub as hub

print(tf.__version__)
elmo = None

_database = hyperparameters ['database']
print('_database = ',_database)



_databases={
    #Twitter
    'twitter':'https://storage.googleapis.com/az-nlp/elmo_ru-twitter_2013-01_2018-04_600k_steps.tar.gz',
                         
    
    #Russian WMT News
    'news':'https://storage.googleapis.com/az-nlp/elmo_ru-news_wmt11-16_1.5M_steps.tar.gz',
            
    #Wikipedia
    'wiki':'http://files.deeppavlov.ai/deeppavlov_data/elmo_ru-wiki_600k_steps.tar.gz'
}


elmo = hub.Module(_databases[_database], trainable=False) #twitter

elmo.__dict__
# elmo._graph.__dict__

"""### Import from GitHub"""

!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/text_tools.py
!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/embedding_tools.py
!rm ml_tools.py  
!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/ml_tools.py
!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/text_normalize.py  
!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/patterns.py 
!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/transaction_values.py  

from transaction_values import *
from embedding_tools import *

# from split import *

!rm doc_structure.py  
!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/doc_structure.py 
!rm legal_docs.py  
!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/legal_docs.py  
from legal_docs import *
from doc_structure import *

"""# Code (common)"""

REPORTED_MOVED={}


def at_github(fn):
  @wraps(fn)
  @wraps(fn)
  def with_reporting(*args, **kwargs):
    if fn.__name__ not in REPORTED_MOVED:
      REPORTED_MOVED[fn.__name__] = 1
      print("----WARNING!: function {} must be imported from github".format(fn.__name__) )
 
    ret = fn(*args, **kwargs)
    return ret

  return with_reporting

REPORTED_DEPRECATED={}
def deprecated(fn):
  @wraps(fn)
  @wraps(fn)
  def with_reporting(*args, **kwargs):
    if fn.__name__ not in REPORTED_DEPRECATED:
      REPORTED_DEPRECATED[fn.__name__] = 1
      print("----WARNING!: function {} is deprecated".format(fn.__name__) )
 
    ret = fn(*args, **kwargs)
    return ret

  return with_reporting

"""## FS utils"""


!pip install docx2txt
!sudo apt-get install antiword
  

import docx2txt, os
from google.colab import files



def read_doc(fn):
  
  text = ''
  try:
    text = docx2txt.process(fn)
  except:
    print("Unexpected error:", sys.exc_info())
    os.system('antiword -w 0 "' + fn + '" > "' + fn + '.txt"')
    with open(fn + '.txt') as f:
      text = f.read()

  return text


#-------
def interactive_upload():
  print('select .docx files:')
  uploaded = files.upload()
  docs=[]
  for fn in uploaded.keys():
    print('User uploaded file "{name}" with length {length} bytes'.format(
        name=fn, length=len(uploaded[fn])))

    with open(fn, "wb") as df:
      df.write(uploaded[fn])
      df.close()

    # extract text
  
    text = ''
    try:
      text = docx2txt.process(fn)
    except:
      print("Unexpected error:", sys.exc_info())
      os.system('antiword -w 0 "' + fn + '" > "' + fn + '.txt"')
      with open(fn + '.txt') as f:
        text = f.read()
      #os.remove(fn+'.txt') #fn.txt was just to read, so deleting  
  
#     print(text)
    docs.append(text)
    return docs
  

  
  
def read_charters():
  texts = {}
  for file in glob.glob("/content/gdrive/My Drive/GazpromOil/Charters/*.doc"):
    try:
      text = read_doc(file)
      texts[file] = text
      print("good:", file)
    except:
      print('WRONG FILE!!', file)

  for file in glob.glob("/content/gdrive/My Drive/GazpromOil/Charters/*.docx"):
    try:
      text = read_doc(file)
      texts[file] = text
      print("good:", file)
    except:
      print('WRONG FILE!!', file)
      
  return texts

"""### TEST DATA"""

import glob

# TEST DATA
#-------------------
if read_docs_from_google_drive or dev_mode:
  charters = read_charters()
  
  print ( [ os.path.split(filename)[1] for filename in charters.keys()] )

#@title ## Select charter to test with { run: "auto", vertical-output: true, form-width: "750px", display-mode: "form" }


TEST_CHARTER_FILENAME = "\u0423\u0441\u0442\u0430\u0432 2.docx" #@param ['Устав ГПН-Новосибирск (НБ)_с СД.doc', 'Устав ГПН-КП_ГОСУ-2018_сентябрь end.doc', 'Новая редакция Устава.doc', 'Устав_ООО ЮП ГПЗ_ред 5.doc', 'Устав ООО.doc', 'Устав - ГПН-Транспорт_ГОСА-2018.docx', 'Устав_Рег. продажи авг 2018.docx', '6.1.1(a) Project Tri-Neft - Sunrise Charter.docx', 'Устав 2.docx']

if dev_mode:
  _filename = '/content/gdrive/My Drive/GazpromOil/Charters/' + TEST_CHARTER_FILENAME
#   filename = '/content/gdrive/My Drive/GazpromOil/Charters/' + 'Устав ООО.doc'    
#   filename = '/content/gdrive/My Drive/GazpromOil/Charters/' + 'Устав ГПН-КП_ГОСУ-2018_сентябрь end.doc'    
#   filename = '/content/gdrive/My Drive/GazpromOil/Charters/' + 'Устав_ООО ЮП ГПЗ_ред 5.doc'    
  TEST_CHARTER_TEXT = charters[_filename] 
  print (TEST_CHARTER_TEXT[:300], '...',TEST_CHARTER_TEXT[2000:2500],'...')

"""### Embedder"""

class ElmoEmbedder(AbstractEmbedder):

  def __init__(self, elmo):
    self.elmo = elmo
    self.config = tf.ConfigProto()
    self.config.gpu_options.allow_growth=True

  def embedd_tokenized_text(self, words, lens):
    with tf.Session(config=self.config) as sess:
      embeddings = self.elmo(
        inputs={
          "tokens": words,
          "sequence_len": lens
        },
        signature="tokens",
        as_dict=True)[ hyperparameters['embeddings.layer'] ]

      sess.run(tf.global_variables_initializer())
      out = sess.run(embeddings)
#       sess.close()


    return out, words

  def get_embedding_tensor(self, str, type=hyperparameters['embeddings.layer'], signature="default"):
    embedding_tensor = self.elmo(str, signature=signature, as_dict=True)[type]

    with tf.Session(config=self.config) as sess:
      sess.run(tf.global_variables_initializer())
      embedding = sess.run(embedding_tensor)
#       sess.close()

    return embedding


embedder = ElmoEmbedder(elmo)



"""## Rendering"""

import matplotlib as mpl
import matplotlib.pyplot as plt

from IPython.core.display import display, HTML

def render_org(org):
  txt_html = to_color_text(org['tokens'], org['attention_vector'], _range=[0,1])
  html = '<div style="background:#eeeeff; padding:0.5em"> recognized NE(s): <br><br> org type:<h3 style="margin:0">  {} </h3>org full name:<h2 style="margin:0">  {} </h2> <br>quote: <div style="font-size:90%; background:white">{}</div> </div>'.format( org['type_name'],org['name'], txt_html )
  display(HTML(html))
  
  
def to_color_text(tokens, weights, colormap='coolwarm', print_debug=False, _range=None):
  #   weights = _weights *-1
  if len(tokens)==0:
#     raise ValueError("don't know how to render emptiness")
    return " - empty -"
  if len(weights) != len(tokens):
    raise ValueError("number of weights differs weights={} tokens={}".format(len(weights), len(tokens)))

  #   if()
  vmin = weights.min()
  vmax = weights.max()

  if _range is not None:
    vmin = _range[0]
    vmax = _range[1]

  if print_debug:
    print(vmin, vmax)

  norm = mpl.colors.Normalize(vmin=vmin - 0.5, vmax=vmax)
  html = ""
  cmap = mpl.cm.get_cmap(colormap)

  for d in range(0, len(weights)):
    word = tokens[d]
    if word == ' ':
      word = '&nbsp;_ '
    
    html += '<span title="{} {:.4f}" style="background-color:{}">{} </span>'.format(
      d,
      weights[d],
      mpl.colors.to_hex(cmap(norm(weights[d]))),
      word)

    #     html+='<span style="background-color:' +mpl.colors.to_hex(cmap(norm(weights[d]) ))+ '">' + str(tokens[d]) + " </span>"
    if tokens[d] == '\n':
      html += "<br>"

  return html


def render_color_text(tokens, weights, colormap='coolwarm', print_debug=False, _range=None):
  html = to_color_text(tokens, weights, colormap, print_debug, _range)
  display(HTML(html))


def winning_patterns_to_html(_tokens, ranges, winning_patterns, _range,
                             colormaps=['Reds', 'Purples', 'Blues', 'Greens', 'Greys']):
  vmin = -ranges[1]
  vmax = -ranges[0]

  #     print("winning_patterns_to_html _range", _range, "min max=", ranges)

  norm = mpl.colors.Normalize(vmax=vmax, vmin=vmin)

  cmaps = []

  #     print (colormaps)
  for n in colormaps:
    cmap = mpl.cm.get_cmap(n)
    cmaps.append(cmap)

  html = ""

  for d in _range:
    winning_pattern_i = winning_patterns[d][0]
    colormap = cmaps[winning_pattern_i % len(colormaps)]
    normed = norm(-winning_patterns[d][1])
    color = mpl.colors.to_hex(colormap(normed))
    html += '<span title="' + '{} {:.2f}'.format(d, winning_patterns[d][
      1]) + '" style="background-color:' + color + '">' + str(
      _tokens[d]) + " </span>"
    if _tokens[d] == '\n':
      html += "<br>"

  return html


def _render_doc_subject_fragments(doc):
  #     print(doc.per_subject_distances)

  _html = ""
  if doc.per_subject_distances is not None:

    type = "Договор  благотворительного пожертвования"
    if doc.per_subject_distances[0] > doc.per_subject_distances[1]:
      type = "Договор возмездного оказания услуг"

    _html += "<h3>" + type + "</h3>"

    colormaps = ['PuRd'] * 5 + ['Blues'] * 7 + ['Greys']

    _html += "<h4> Предмет договора:</h4>"

    for region in [doc.subj_range]:
      _html += winning_patterns_to_html(_tokens=doc.tokens, ranges=doc.subj_ranges,
                                        winning_patterns=doc.winning_subj_patterns, _range=region,
                                        colormaps=colormaps)

  return _html


currencly_map = {
  'доллар': 'USD',
  'евро': 'EUR',
  'руб': 'RUR'
}


def sum_to_html(result, prefix=''):
  html = ""
  if result is None:
    html += '<h3 style="color:red">СУММА НЕ НАЙДЕНА</h3>'
  else:
    html += '<h3>{}{} {:20,.2f}</h3>'.format(prefix, currencly_map[result[1]], result[0])
  return html


def print_results(_doc, results=None):
  if results is None:
    results = _doc.found_sum

  result, (start, end), sentence, meta = results

  html = "<hr>"

  html += _render_doc_subject_fragments(_doc)

  html += sum_to_html(result)

  for key in meta.keys():
    html += '<div style="font-size:9px">' + str(key) + " = " + str(meta[key]) + "</div>"

  display(HTML(html))
  render_color_text(_doc.tokens[start:end], _doc.sums[start:end])


def render_sections(doc, weights):
  if weights is None:
    weights = np.zeros(len(doc.tokens))
    for subdoc in doc.subdocs:
      weights[subdoc.start] = 1

  fig = plt.figure(figsize=(20, 6))
  ax = plt.axes()
  ax.plot(weights, alpha=0.5, color='green', label='Sections');
  plt.title('Sections')

  for subdoc in doc.subdocs:
    print(subdoc.filename, '-' * 20)
    render_color_text(subdoc.tokens, weights[subdoc.start:subdoc.end], _range=[0, 1])

"""## Legal Doc Classes

### Document Structure
"""

# ------------------------------
def subdoc_between_lines(line_a: int, line_b: int, doc):
  _str = doc.structure.structure
  start = _str[line_a].span[1]
  if line_b is not None:
    end = _str[line_b].span[0]
  else:
    end = len(doc.tokens)
  return doc.subdoc(start, end)


# ------------------------------
@deprecated
def find_best_headline_by_pattern_prefix(headline_indices, embedded_headlines, pat_refix, threshold, render=False):
  distance_by_headline = []
  if render:
    print('headlines', '-' * 20)

  if render:
    fig = plt.figure(figsize=(20, 7))
    ax = plt.axes()

  off_ = 0

  attention_vs = []
  for headline_index, subdoc in zip(headline_indices, embedded_headlines):
    names, _c = rectifyed_sum_by_pattern_prefix(subdoc.distances_per_pattern_dict, pat_refix, relu_th=0.6)
    names = smooth_safe(names, 4)
    _max_id = np.argmax(names)
    _max = np.max(names)
    _sum = math.log(1 + np.sum(names[_max_id - 1:_max_id + 2]))
    distance_by_headline.append(_max + _sum)
    attention_vs.append(names)

    if render:
      ax.plot(names + off_, alpha=0.5, label=str(headline_index));
      print('dist={} sum={} d+s={}'.format(_max, _sum, _max + _sum))
      render_color_text(subdoc.tokens_cc, names, _range=[0, 2])
    off_ += 1

  if render:
    plt.legend(loc='upper left')
    plt.title("find_best_headline_by_pattern_prefix:" + pat_refix + " in headlines")

  bi = np.argmax(distance_by_headline)
  if distance_by_headline[bi] < threshold:
    raise ValueError('Cannot find headline matching pattern "{}"'.format(pat_refix))

  return bi, distance_by_headline, attention_vs[bi]


# ------------------------------
import math
from typing import List

from legal_docs import rectifyed_sum_by_pattern_prefix, LegalDocument
from ml_tools import smooth_safe


def _find_best_headline_by_pattern_prefix(headline_indices, embedded_headlines, pat_refix, threshold, render=False):
  distance_by_headline = []

  attention_vs = []
  for headline_index, subdoc in zip(headline_indices, embedded_headlines):
    names, _c = rectifyed_sum_by_pattern_prefix(subdoc.distances_per_pattern_dict, pat_refix, relu_th=0.6)
    names = smooth_safe(names, 4)
    _max_id = np.argmax(names)
    _max = np.max(names)
    _sum = math.log(1 + np.sum(names[_max_id - 1:_max_id + 2]))
    distance_by_headline.append(_max + _sum)
    attention_vs.append(names)

  bi = np.argmax(distance_by_headline)
  if distance_by_headline[bi] < threshold:
    raise ValueError('Cannot find headline matching pattern "{}"'.format(pat_refix))

  return bi, distance_by_headline, attention_vs[bi]


def match_headline_types(head_types_list, headline_indexes, embedded_headlines: List[LegalDocument], pattern_prefix,
                         threshold):
  best_indexes = {}
  for head_type in head_types_list:
    try:
      bi, distance_by_headline, attention_v = \
        _find_best_headline_by_pattern_prefix(headline_indexes, embedded_headlines, pattern_prefix + head_type,
                                              threshold,
                                              render=False)

      obj = {'headline.index': bi,
             'headline.type': head_type,
             'headline.confidence': distance_by_headline[bi],
             'headline.subdoc': embedded_headlines[bi],
             'headline.attention_v': attention_v}

      if bi in best_indexes:
        e_obj = best_indexes[bi]
        if e_obj['headline.confidence'] < obj['headline.confidence']:
          best_indexes[bi] = obj
      else:
        best_indexes[bi] = obj

    except Exception as e:
      print(e)
      pass

  return best_indexes


# ------------------------------
@deprecated
def map_headline_index_to_headline_type(headline_indexes, embedded_headlines, threshold):
  best_indexes = {}
  for head_type in head_types:
    try:
      bi, distance_by_headline, attention_v = \
        find_best_headline_by_pattern_prefix(headline_indexes, embedded_headlines, 'd_head_' + head_type, threshold,
                                             render=False)

      obj = {'headline.index': bi,
             'headline.type': head_type,
             'headline.confidence': distance_by_headline[bi],
             'headline.subdoc': embedded_headlines[bi],
             'headline.attention_v': attention_v}

      if bi in best_indexes:
        e_obj = best_indexes[bi]
        if e_obj['headline.confidence'] < obj['headline.confidence']:
          best_indexes[bi] = obj
      else:
        best_indexes[bi] = obj

    except Exception as e:
      print(e)
      pass

  return best_indexes



# ------------------------------
def _doc_section_under_headline(_doc, hl_struct, headline_indices, render=False):
  if render:
    print('_doc_section_under_headline:searching for section:', hl_struct['headline.type'])

  bi = hl_struct['headline.index']

  bi_next = bi + 1
  best_headline = headline_indices[bi]

  if bi_next < len(headline_indices):
    best_headline_next = headline_indices[bi_next]
  else:
    best_headline_next = None

  if render:
    print(
      '_doc_section_under_headline: best_headline:{} best_headline_next:{} bi:{}'.format(best_headline,
                                                                                         best_headline_next, bi),
      '_' * 40)

  subdoc = subdoc_between_lines(best_headline, best_headline_next, _doc)
  if len(subdoc.tokens) < 2:
    raise ValueError(
      'Empty "{}" section between headlines #{} and #{}'.format(hl_struct['headline.type'], best_headline, best_headline_next))

  # May be embedd
  if render:
    print('_doc_section_under_headline: embedding segment:', untokenize(subdoc.tokens_cc))

  

  return subdoc


# ------------------------------
def find_sections_by_headlines(best_indexes, _doc, headline_indexes, render=False):
  sections = {}

  for bi in best_indexes:

    """
    bi = {
        'headline.index': bi,
        'headline.type': head_type,
        'headline.confidence': distance_by_headline[bi],
        'headline.subdoc': embedded_headlines[bi],
        'headline.attention_v': attention_v}
    """
    hl = best_indexes[bi]
    
    if render:
      print('=' * 100)
      print(untokenize(hl['headline.subdoc'].tokens_cc))
      print('-' * 100)

    head_type = hl['headline.type']

    try:      
      hl['body.subdoc'] = _doc_section_under_headline(_doc, hl, headline_indexes, render=render)
      sections[head_type] = hl
      
    except ValueError as error:
      print(error)

  return sections

"""### Experiment: headlines attention vector"""

def ascents(x, delta=1.0):
  if x==[]:
    return []
  
  v = np.zeros(len(x))
  v[0]=x[0]
  for i in range(1, len(x)):
    if x[i] - x[i-1] > delta:
      v[i]=x[i]
  return v


@at_github
def _find_sentences_by_attention_vector(doc, _attention_vector, relu_th=0.5):
  attention_vector = relu(_attention_vector, relu_th)
  maxes = extremums(attention_vector)[1:]
  maxes = doc.find_sentence_beginnings(maxes)
  maxes = remove_similar_indexes(maxes, 6)

  res = {}
  for i in maxes:
    s, e = get_sentence_bounds_at_index(i + 1, doc.tokens)
    if e - s > 0:
      res[s] = e

  return res, attention_vector, maxes


from legal_docs import CharterDocument
from ml_tools import relu, normalize
from text_tools import untokenize

 
  
class test_charter:
  def __enter__(self, *args):
    print(args)
    self.TCD = CharterDocument(TEST_CHARTER_TEXT)
    self.TCD.parse()
    return self.TCD
  def __exit__(self, type, value, traceback):
    del self.TCD
  

if dev_mode:
  with test_charter() as TCD:


#     def __test_highlight_doc_structure():

#       r = highlight_doc_structure(TCD)

#       sentences = [line.to_string(TCD.tokens_cc) + '<br>' for line in TCD.structure.structure]
#       render_color_text(sentences, r['line_probability'], colormap='coolwarm', print_debug=False, _range=None)

#       plt.figure(figsize=(20, 10))
#       ax = plt.axes()
#       off = 0
#       for k in r:
#         ax.plot(normalize(r[k]) + off, label=k, alpha=0.5)
#         off += 1

#       ax.plot(normalize(r['result']) + 1, label=k, alpha=0.5)
#       plt.title('detecting captions')
#       plt.legend(loc='upper left')

#       return r

#     __test_highlight_doc_structure()
    lines_indexes = TCD.structure.headline_indexes


    for l in lines_indexes:
      print('>',TCD.structure.structure[l].to_string(TCD.tokens_cc))

if dev_mode:
  print(TEST_CHARTER_TEXT)

"""# Charter parsing-related code

### Constants
"""

# self.headlines = ['head.directors', 'head.all', 'head.gen', 'head.pravlenie', 'name']

head_types = ['head.directors', 'head.all', 'head.gen', 'head.pravlenie']

head_types_dict = {  'head.directors':'Совет директоров', 
                     'head.all':'Общее собрание участников/акционеров', 
                     'head.gen':'Генеральный директор', 
#                      'shareholders':'Общее собрание акционеров', 
                     'head.pravlenie':'Правление общества',
                     'head.unknown':'*Неизвестный орган управления*'}

head_types_colors = {  'head.directors':'crimson', 
                     'head.all':'orange', 
                     'head.gen':'blue', 
                     'head.shareholders':'#666600', 
                     'head.pravlenie':'#0099cc',
                     'head.unknown':'#999999'}


org_types={
    'org_unknown':'undefined', 
    'org_ao':'Акционерное общество', 
    'org_zao':'Закрытое акционерное общество', 
    'org_oao':'Открытое акционерное общество', 
    'org_ooo':'Общество с ограниченной ответственностью'}

"""## Tools"""

##

"""## 1.  Patterns Factory 1"""



"""### HeadlinesPatternFactory"""

class HeadlinesPatternFactory(AbstractPatternFactory):

  def create_pattern(self, pattern_name, ppp):
    _ppp = (ppp[0].lower(), ppp[1].lower(), ppp[2].lower())
    fp = FuzzyPattern(_ppp, pattern_name)
    self.patterns.append(fp)
    self.patterns_dict[pattern_name] = fp
    return fp

  def __init__(self, embedder):
    AbstractPatternFactory.__init__(self, embedder)
    self.patterns_dict = {}
    self._build_head_patterns()
    self.embedd()
    
    self.headlines = ['head.directors', 'head.all', 'head.gen', 'head.pravlenie', 'name']

  def _build_head_patterns(self):
    def cp(name, tuples):
      return self.create_pattern(name, tuples)
    
    head_prfx="статья 0"
            
    cp('headline.name.1', ('Полное', 'фирменное наименование', 'общества на русском языке:'))    
    cp('headline.name.2', ('', 'ОБЩИЕ ПОЛОЖЕНИЯ', ''))    
    cp('headline.name.3', ('', 'фирменное', ''))
    cp('headline.name.4', ('', 'русском', ''))
    cp('headline.name.5', ('', 'языке', ''))
    cp('headline.name.6', ('', 'полное', ''))
    
    
    cp('headline.head.all.1', (head_prfx, 'компетенции общего собрания акционеров', ''))
    cp('headline.head.all.1', (head_prfx, 'компетенции общего собрания участников', 'общества'))
    cp('headline.head.all.2', (head_prfx, 'собрание акционеров\n', ''))
    
    cp('headline.head.all.3', ('', 'компетенции', ''))
    cp('headline.head.all.4', ('', 'собрания', ''))
    cp('headline.head.all.5', ('', 'участников', ''))
    cp('headline.head.all.6', ('', 'акционеров', ''))
    
    
    cp('headline.head.directors.1', (head_prfx, 'компетенция совета директоров', 'общества'))
    cp('headline.head.directors.2', ('', 'совет директоров общества', ''))
    cp('headline.head.directors.3', ('', 'компетенции', ''))
    cp('headline.head.directors.4', ('', 'совета', ''))
    cp('headline.head.directors.5', ('', 'директоров', ''))
    
    
    cp('headline.head.pravlenie.1', (head_prfx, 'компетенции правления', ''))
    cp('headline.head.pravlenie.2', ('', 'компетенции', ''))
    cp('headline.head.pravlenie.3', ('', 'правления', ''))
#     cp('d_head_pravlenie.2', ('', 'общества', ''))
    
    cp('headline.head.gen.1', (head_prfx, 'компетенции генерального директора', ''))
    cp('headline.head.gen.2', ('', 'компетенции', ''))
    cp('headline.head.gen.3', ('', 'генерального', ''))
    cp('headline.head.gen.4', ('', 'директора', ''))
    

HPF = HeadlinesPatternFactory(embedder)

"""### PricePF

see (https://colab.research.google.com/drive/1w5KNrKn6O4GFM5dFEspeIVEF-mUwHGm_#scrollTo=1uz5CtBdETys&uniqifier=6)
"""

## DO NOT EDIT HERE
# see https://colab.research.google.com/drive/1w5KNrKn6O4GFM5dFEspeIVEF-mUwHGm_#scrollTo=1uz5CtBdETys&uniqifier=6
from patterns import AbstractPatternFactory, FuzzyPattern


class PriceFactory(AbstractPatternFactory):

  def create_pattern(self, pattern_name, ppp):
    _ppp = (ppp[0].lower(), ppp[1].lower(), ppp[2].lower())
    fp = FuzzyPattern(_ppp, pattern_name)
    self.patterns.append(fp)
    self.patterns_dict[pattern_name] = fp
    return fp

  def __init__(self, embedder):
    AbstractPatternFactory.__init__(self, embedder)

    self.patterns_dict = {}
 
    self._build_order_patterns()
    self._build_sum_margin_extraction_patterns()
    self._build_sum_patterns()
    self.embedd()

  def _build_order_patterns(self):
    def cp(name, tuples):
      return self.create_pattern(name, tuples)

    prefix = 'принятие решения о согласии на совершение или о последующем одобрении'
    
    cp('d_order_4', (prefix, 'cделки', ', стоимость которой равна или превышает'))
    cp('d_order_5', (prefix, 'cделки', ', стоимость которой составляет менее'))
    
  def _build_sum_patterns(self):
    def cp(name, tuples):
      return self.create_pattern(name, tuples)
    suffix = 'млн. тыс. миллионов тысяч рублей долларов копеек евро'
    prefix = 'решений о совершении сделок '


    cp('sum_max1', (prefix + 'стоимость', 'не более 0', suffix))
    cp('sum_max2', (prefix + 'цена', 'не больше 0', suffix))
    cp('sum_max3', (prefix + 'стоимость <', '0', suffix))
    cp('sum_max4', (prefix + 'цена менее', '0', suffix))
    cp('sum_max5', (prefix + 'стоимость не может превышать', '0', suffix))  
    cp('sum_max6', (prefix + 'общая сумма может составить', '0', suffix))
    cp('sum_max7', (prefix + 'лимит соглашения', '0', suffix))
    cp('sum_max8', (prefix + 'верхний лимит стоимости', '0', suffix))
    cp('sum_max9', (prefix + 'максимальная сумма', '0', suffix))
    
     

  def _build_sum_margin_extraction_patterns(self):
    suffix = 'млн. тыс. миллионов тысяч рублей долларов копеек евро'
    prefix = 'совершение сделок '

    # less than
    self.create_pattern('sum__lt_1', (prefix + 'стоимость', 'не более 0', suffix))
    self.create_pattern('sum__lt_2', (prefix + 'цена', 'не больше 0', suffix))
    self.create_pattern('sum__lt_3', (prefix + 'стоимость', '< 0', suffix))
    self.create_pattern('sum__lt_4', (prefix + 'цена', 'менее 0', suffix))
    self.create_pattern('sum__lt_4.1', (prefix + 'цена', 'ниже 0', suffix))
    self.create_pattern('sum__lt_5', (prefix + 'стоимость', 'не может превышать 0', suffix))
    self.create_pattern('sum__lt_6', (prefix + 'лимит соглашения', '0', suffix))
    self.create_pattern('sum__lt_7', (prefix + 'верхний лимит стоимости', '0', suffix))
    self.create_pattern('sum__lt_8', (prefix, 'максимум 0', suffix))
    self.create_pattern('sum__lt_9', (prefix, 'до 0', suffix))
    self.create_pattern('sum__lt_10', (prefix, 'но не превышающую 0', suffix))
    self.create_pattern('sum__lt_11', (prefix, 'совокупное пороговое значение 0', suffix))

    # greather than
    self.create_pattern('sum__gt_1', (prefix + 'составляет', 'более 0', suffix))
    self.create_pattern('sum__gt_2', (prefix + '', 'превышает 0', suffix))
    self.create_pattern('sum__gt_3', (prefix + '', 'свыше 0', suffix))
    self.create_pattern('sum__gt_4', (prefix + '', 'сделка имеет стоимость, равную или превышающую 0', suffix))



PricePF = PriceFactory(embedder)

"""### CharterPF"""

class CharterPatternFactory(AbstractPatternFactory):

  def create_pattern(self, pattern_name, ppp):
    _ppp = (ppp[0].lower(), ppp[1].lower(), ppp[2].lower())
    fp = FuzzyPattern(_ppp, pattern_name)
    self.patterns.append(fp)
    self.patterns_dict[pattern_name] = fp
    return fp

  def __init__(self, embedder):
    AbstractPatternFactory.__init__(self, embedder)

    self.patterns_dict = {}

    #     self._build_paragraph_split_pattern()
    self._build_order_patterns()
    self._build_head_patterns()

    self.embedd()

  @deprecated
  def _build_head_patterns(self):
    def cp(name, tuples):
      return self.create_pattern(name, tuples)
    
    head_prfx="СТАТЬЯ 0. "

    cp('d_competence', ('к', 'компетенции', 'чего-то относятся'))
    
    
    cp('d_head_all.5', (head_prfx, 'компетенции общего собрания акционеров\n', ''))
    cp('d_head_all.6', (head_prfx, 'собрание акционеров\n', ''))
    
    cp('d_head_all.0', ('', 'компетенции', ''))
    cp('d_head_all.2', ('', 'собрания', ''))
    cp('d_head_all.3', ('', 'участников', ''))
    cp('d_head_all.4', ('', 'акционеров', ''))
    
    
    cp('d_head_directors.3', (head_prfx, 'компетенция совета директоров\n', ''))
    cp('d_head_directors.3', ('', 'совет директоров общества\n', ''))
    cp('d_head_directors.0', ('', 'компетенции', ''))
    cp('d_head_directors.1', ('', 'совета', ''))
    cp('d_head_directors.2', ('', 'директоров', ''))
    
    
    cp('d_head_pravlenie.0', (head_prfx, 'компетенции правления', ''))
    cp('d_head_pravlenie.0', ('', 'компетенции', ''))
    cp('d_head_pravlenie.1', ('', 'правления', ''))
#     cp('d_head_pravlenie.2', ('', 'общества', ''))
    
    cp('d_head_gen.3', (head_prfx, 'компетенции генерального директора', ''))
    cp('d_head_gen.0', ('', 'компетенции', ''))
    cp('d_head_gen.1', ('', 'генерального', ''))
    cp('d_head_gen.2', ('', 'директора', ''))
                 
    
    
    cp('negation.1', ('', 'кроме', ''))
    cp('negation.2', ('', 'не', ''))
    cp('negation.3', ('за', 'исключением', ''))
    cp('negation.4', ('за', 'иные', 'вопросы'))
   
    
        
    cp('organs_1', ('\n', 'органы управления', '.\n органами управления общества являются'))


  @deprecated
  def _build_order_patterns(self):
    def cp(name, tuples):
      return self.create_pattern(name, tuples)

    self.create_pattern('d_order_1', ('Порядок', 'одобрения сделок', 'в совершении которых имеется заинтересованность'))
    self.create_pattern('d_order_2', ('', 'принятие решений', 'о совершении сделок'))
    self.create_pattern('d_order_3', ('', 'одобрение заключения', 'изменения или расторжения какой-либо сделки Общества'))
    self.create_pattern('d_order_4', ('', 'Сделки', 'стоимость которой равна или превышает'))
    self.create_pattern('d_order_5', ('', 'Сделки', 'стоимость которой составляет менее'))

    

 


CharterPF = CharterPatternFactory(embedder)

"""## NER

### sample_for_ner

#### tiny
"""

tiny_charter_sample="""
 

Общие положения





 


Уставный капитал


xxvii Уставный капитал Общества составляется из номинальной стоимости долей его Участников и составляет  6 734 244 615 (Шесть миллиардов семьсот тридцать четыре миллиона двести сорок четыре тысячи шестьсот пятнадцать) рублей.



xxxv Общее собрание участников не вправе принимать решение о распределении прибыли Общества между Участниками Общества:

       • до полной оплаты всего уставного капитала Общества;

     

Органы управления


lxxxiv Органами управления Общества являются:


       • Общее собрание участников Общества;


       • Совет директоров – Коллегиальный орган управления;


       • Правление Общества - Коллегиальный исполнительный орган;


       • Генеральный директор - Единоличный исполнительный орган.


Общее собрание участников Общества


lxxxvi Высшим органом управления Общества является Общее собрание участников Общества. Очередное Общее собрание участников Общества  рассматривает и утверждает результаты деятельности Общества за финансовый год и проводится в период с 1 марта по 30 апреля. Проводимые помимо очередного Общие собрания участников Общества являются внеочередными. Внеочередные Общие собрания участников Общества проводятся в случаях, когда этого требуют интересы Общества.


lxxxvii К исключительной компетенции Общего собрания участников Общества относятся следующие вопросы:

    

       12) установление размера, состава, формы и порядка внесения дополнительных вкладов, определение общей стоимости таких дополнительных вкладов, а также иных условий внесения дополнительных вкладов Участниками Общества;
       13) принятие решения о согласии на совершение или о последующем одобрении крупных сделок, связанных с приобретением, отчуждением или возможностью отчуждения Обществом прямо или косвенно имущества, цена или балансовая стоимость которого составляет 25 (Двадцать пять) и более процентов балансовой стоимости имущества Общества по данным бухгалтерской отчетности на последнюю отчетную дату;
       14) принятие решения о согласии на совершение или о последующем одобрении сделок, в совершении которых имеется заинтересованность, если цена или стоимость имущества, являющегося предметом сделки,  превышает 10 (десять) процентов балансовой процентов  балансовой стоимости имущества Общества по данным бухгалтерской отчетности на последнюю отчетную дату.
       15) принятие решения о реорганизации или ликвидации Общества;
       26) принятие решения о согласии на совершение или о последующем одобрении сделок мены, дарения, иных сделок, предусматривающих безвозмездное отчуждение имущества Общества либо оплату (встречное предоставление) в неденежной форме,  одобрение договоров спонсорского и благотворительного характера, независимо от суммы сделки, за исключением случаев, когда такие сделки требуют получения согласия органов управления Общества как крупные сделки и сделки с заинтересованностью;
       27) решение вопросов, отнесенных к компетенции Совета директоров, в случае, если Совет директоров не избран;
       28) решение иных вопросов, отнесенных в соответствии с действующим законодательством к компетенции Общего собрания участников Общества.



Совет директоров Общества


      1. Совет директоров осуществляет общее руководство деятельностью Общества, а также контроль над исполнением решений Общего собрания участников Общества и иной деятельностью его исполнительного органа.

      2. Совет директоров состоит из 4 (Четырех) человек.

      3. К компетенции Совета директоров относится:


      14) утверждение процедур внутреннего контроля за финансово-хозяйственной деятельностью Общества, в том числе утверждение положения о внутрихозяйственном контроле, документальных проверках и ревизиях;

      15) принятие решения о согласии на совершение или о последующем одобрении сделок, связанных с осуществлением денежных выплат и (или) приобретением, отчуждением и возможностью отчуждения, обременением и возможностью обременения Обществом имущества, в рамках которых цена предложения или стоимость отчуждаемого имущества, определенная на момент совершения сделки, превышает в рамках одной сделки или нескольких взаимосвязанных сделок, заключенных в течение 6 (шести) месяцев, в совокупности 50 000 000 (Пятьдесят миллионов) рублей или эквивалент данной суммы в иной валюте, за исключением случаев, когда такие сделки требуют получения согласия органов управления Общества  как крупные сделки и сделки с заинтересованностью, а также для сделок, одобряемых в соответствии с подпунктами 22)-26) пункта 11.2 настоящего Устава, подпунктами 17) –22), 30) пункта 12.3 настоящего Устава;

      16) принятие решения о начале/урегулировании любых судебных споров и разбирательств, цена иска по которым превышает 50 000 000 (Пятьдесят миллионов) рублей (или эквивалент в другой валюте) в том числе, подписание мирового соглашения, признание иска, отказ от иска, а также совершение любых других процессуальных действий, кроме судебных споров, принятие решения, в отношении которых отнесено к компетенции Общего собрания участников Общества;


Правление Общества


 1. Правление является Коллегиальным исполнительным органом Общества. Правление Общества избирается Общим собранием участников Общества в количестве  2 (Двух) человек – членов Правления Общества.


12. В случае непринятия Правлением решения по одному и тому же вопросу в ходе 2 (Двух) надлежаще созванных заседаний Правления по любым причинам, включая отсутствие кворума и недостаточность количества голосов для принятия решения, вопрос, по которому не было принято решение, выносится на рассмотрение Совета директоров (включается в повестку дня следующего созываемого Совета директоров). Во избежание сомнений, решение не может рассматриваться как непринятое для целей настоящего пункта, в случае, если решение не принято вследствие того, что против него проголосовали или воздержались от голосования все члены Правления.

13. К компетенции Правления Общества относятся:



         • согласование кандидатур на должности руководителей структурных подразделений (за исключением филиалов и представительств) Общества, а также условий трудовых договоров с указанными лицами, согласование освобождения от должностей указанных лиц;


         • принятие решения о согласии на совершение или о последующем одобрении сделок, связанных с осуществлением денежных выплат и (или) приобретением, отчуждением и возможностью отчуждения, обременением и возможностью обременения Обществом имущества, стоимость которого в рамках одной сделки или нескольких взаимосвязанных сделок в совокупности составляет от 1 000 000 (Одного) миллиона рублей до 50 000 000 (Пятьдесят миллионов) рублей или эквивалент данной суммы в иной валюте, за исключением случаев, когда  такие сделки требуют получения согласия органов управления Общества  в соответствии с Законом и Уставом;


         • принятие решения по приемке и оплате Обществом выполненных работ по Агентскому договору на строительство объекта «Южно-Приобский газоперерабатывающий завод (ЮП ГПЗ). Газокомпрессорная станция ЮЛТ Приобского месторождения» №10-875 от 29.09.2010 г., заключенному между Обществом и ООО «Газпромнефть-Хантос».


Генеральный директор Общества


cvi Руководство текущей деятельностью Общества осуществляется единоличным исполнительным органом Общества - Генеральным директором. Генеральный директор избирается Общим собранием участников Общества сроком на 3 (Три) года, если решением Общего собрания участников не предусмотрен иной срок. Генеральный директор может быть переизбран решением Общего собрания участников Общества неограниченное количество раз. Генеральный директор действует на основании Устава Общества и трудового договора, заключаемого с ним Обществом.


       • утверждать внутренние документы, регулирующие текущую (операционную) деятельность Общества, и локальные нормативные акты (за исключением локальных нормативных актов, устанавливающих системы оплаты труда и других документов, утверждение которых отнесено к компетенции иных органов управления Общества);

       • вносить вопросы на рассмотрение Общих собраний участников Общества, заседания Совета директоров;

       • принимать решения по другим вопросам, относящимся к его компетенции.



cxlv Недействительность любого положения настоящего Устава не влечет недействительности остальных его положений. В случае вступления в силу новых нормативных актов, в соответствии с которыми отдельные положения настоящего Устава становятся недействительными, и которые требуют внести изменения в Устав, Участники обязаны принять решения о внесении соответствующих изменений в настоящий Устав.

v Полное фирменное наименование Общества на русском языке:

      Общество с ограниченной ответственностью «Южно-Приобский газоперерабатывающий завод».

      Сокращенное наименование на русском языке:

      ООО «Южно-Приобский ГПЗ».


      Полное фирменное наименование Общества на английском языке: Yuzhno-Priobsky Gaz Processing Plant Limited Liability Company.


      Сокращенное наименование на английском языке:  Yuzhno-Priobsky GPP LLC.


"""

"""#### Larger"""

SAMPLE_CHARTER_3="""

УТВЕРЖДЕН

Решением единственного акционера	

Акционерного общества

«Газпромнефть-Транспорт»

от «29» июня 2018 года

























УСТАВ

Акционерного общества 

«ГАЗПРОМНЕФТЬ-ТРАНСПОРТ»





























































г. Омск, 

2018 г.



	Статья 1. Общие положения

	

	1.1. 	Акционерное общество «Газпромнефть-Транспорт» (в дальнейшем именуемое – «Общество»), ранее именуемое открытое акционерное общество «Газпромнефть-Транспорт», учреждено с наименованием «Открытое акционерное общество «Сибнефть-Ярославнефтепродукт» в соответствии с законодательством Российской Федерации и зарегистрировано 06 июня 2005 г. Межрайонной инспекцией Федеральной налоговой службы №5 по Ярославской области, ОГРН 1057600596877.

	31 декабря 2010 г. Открытое акционерное общество «Сибнефть-Ярославнефтепродукт» переименовано в  Открытое акционерное общество «Газпромнефть-Иваново».

	«19» июня 2013 г. Открытое акционерное общество «Газпромнефть-Иваново» переименовано в  Открытое акционерное общество «Газпромнефть-Транспорт».

22 июня 2015 года Открытое акционерное общество «Газпромнефть-Транспорт» переименовано в Акционерное общество «Газпромнефть-Транспорт».

	1.2. Правовое положение Общества, права и обязанности его участников определяются Гражданским кодексом Российской Федерации, Федеральным законом «Об акционерных обществах», другими правовыми актами Российской Федерации (далее – «Закон», «законодательство») и настоящим Уставом. 

	1.3. Срок деятельности Общества не ограничен.





	Статья 2. Фирменное наименование и  место нахождения Общества

	

	2.1. 	Фирменное наименование Общества на русском языке:

	  - полное – Акционерное общество «Газпромнефть-Транспорт»;

	  - сокращенное – АО «Газпромнефть-Транспорт».

	2.2. 	Место нахождения Общества: Российская Федерация, город Омск.





Статья 3. Юридический статус Общества



	3.1. 	Общество считается созданным со дня внесения в Единый государственный реестр юридических лиц соответствующей записи, имеет в собственности обособленное имущество, учитываемое на его самостоятельном балансе, может от своего имени приобретать и осуществлять имущественные и личные неимущественные права, нести  обязанности, быть истцом и ответчиком в суде.

	3.2.  	Общество имеет гражданские права и несет обязанности, необходимые для осуществления любых видов деятельности, не запрещенных федеральными законами.

	3.3. 	Общество является дочерним обществом ПАО «Газпром нефть» (ОГРН 1025501701686).  

	ПАО «Газпром нефть» вправе давать Обществу указания и (или) согласие на заключение сделок. 

	3.4.  	Акционеры не отвечают по обязательствам Общества, за исключением случаев, предусмотренных законодательством.

	3.5. 	Акционеры, не полностью оплатившие акции, несут солидарную ответственность по обязательствам Общества в пределах неоплаченной части стоимости принадлежащих им акций.

	3.6.	Акционерами Общества могут быть граждане и юридические лица.

	3.7. 	Общество в соответствии с законодательством открывает расчетные и иные счета в учреждениях банков, в том числе за рубежом, в рублях и иностранной валюте.

	3.8. 	Общество является собственником имущества, переданного ему акционерами в качестве оплаты акций.

	3.9. 	Общество вправе в установленном порядке участвовать в создании на территории Российской Федерации и за её пределами других организаций, приобретать доли (акции) в их уставных капиталах, здания, сооружения, землю, права пользования природными ресурсами, ценные бумаги, а также любое другое имущество, которое в соответствии с законодательством может быть объектом права собственности юридического лица.

	3.10. 	Общество ведет бухгалтерский, статистический и налоговый учет в соответствии с законодательством. 

	3.11. Общество имеет круглую печать, содержащую его полное фирменное наименование на русском языке и указание на место его нахождения. Общество может иметь зарегистрированные в установленном порядке  товарные знаки, знаки обслуживания иные средства визуальной идентификации, промышленные образцы, бланки, штампы с указанием своего наименования на русском и на любом иностранном языке.

	3.12. 	При реорганизации  Общества сведения, составляющие государственную тайну, и их носители подлежат передаче правопреемнику Общества, если этот правопреемник имеет полномочия по проведению работ с использованием сведений, составляющих государственную тайну. В противном случае указанные сведения и их носители подлежат в установленном порядке сдаче на архивное хранение, или уничтожению, или передаются органу, в распоряжение которого в соответствии со статьей 9 Закона «О государственной тайне» находятся соответствующие сведения.

	3.13. 	При ликвидации Общества сведения, составляющие государственную тайну, и их носители подлежат в установленном порядке сдаче на архивное хранение, или уничтожению, или передаются органу, в распоряжении которого в соответствии с Федеральным законом «О государственной тайне» находятся соответствующие сведения.





Статья 4. Ответственность Общества



	4.1. 	Общество несет ответственность по своим обязательствам всем принадлежащим ему имуществом.

	4.2. 	Общество не отвечает по обязательствам своих акционеров.

	4.3. 	Государство и его органы не отвечают по обязательствам Общества, равно как и Общество не отвечает по обязательствам государства и его органов.





Статья 5. Филиалы и представительства, дочерние и зависимые общества

	

	5.1. 	Общество может по решению Совета директоров создавать филиалы и открывать представительства, как на территории Российской Федерации, так и за ее пределами.

	Филиалы и представительства Общества не являются юридическими лицами.

	Филиалы и представительства Общества осуществляют деятельность от имени Общества и действуют на основании Положений, утвержденных Советом директоров  Общества. Общество несет ответственность за деятельность филиалов и представительств. 

	5.2. 	Общество может иметь дочерние общества с правами юридического лица, как на территории Российской Федерации, так и за ее пределами. 

	5.3. 	Создание Обществом дочерних обществ, открытие филиалов и представительств за пределами территории Российской Федерации осуществляется в соответствии с настоящим Уставом и законодательством иностранного государства по месту нахождения дочерних обществ, филиалов и представительств, если иное не предусмотрено международным договором Российской Федерации.





	Статья 6. Цель создания и основные виды деятельности Общества



	6.1. 	Целью деятельности Общества является извлечение прибыли за счет осуществления любых, не запрещенных законом, видов деятельности.

	6.2. 	Основными видами деятельности Общества являются:

			организация и осуществление перевозок нефтепродуктов, СУГ, опасных грузов автомобильным транспортом;

			осуществление диспетчеризации доставки нефтепродуктов, СУГ;

			разработка маршрутов транспортировки опасных грузов и получение специальных разрешений на движение по автомобильным дорогам;

			осуществление приемки,  хранения и отгрузки  нефтепродуктов, СУГ     всеми видами транспорта;

			осуществление оптовой и розничной реализации нефтепродуктов, СУГ;

			переработка нефти и продуктов ее переработки;

			осуществление погрузо-разгрузочных работ, хранения оборудования и материалов, оказание услуг по  комплектованию  оборудованием  и  материалами сторонних  организаций, оказание услуг складского хозяйства;

			осуществление торговой, торгово-посреднической, закупочной и сбытовой деятельности;

			осуществление всех видов строительной деятельности, монтажных, пуско-наладочных и отделочных работ, выпуск продукции стройиндустрии;

			осуществление проектной,   научно-исследовательской,  опытно-конструкторской деятельности;

			изготовление, наладка, монтаж, сервисное обслуживание устройств, приборов, машин;

			транспортировка различных грузов всеми видами транспорта, в том числе по международным перевозкам, как на собственных, так и на привлеченных транспортных средствах;

			осуществление экспортно-импортных операций и иной внешнеэкономической деятельности в соответствии с действующим законодательством;

			организация работы станций технического обслуживания, платных стоянок и гаражей:

			осуществление перевозки пассажиров;

			осуществление информационно-справочного, сервисного обслуживания;

			диспетчерское руководство движением автомобильного транспорта при осуществлении перевозок;

			осуществление технического обслуживания, ремонта и хранения автотранспортных средств;

			проведение диагностики, инструментального контроля технического состояния автотранспортных средств;

			сдача в аренду автотранспортных средств, в том числе в аренду с экипажем;

			оказание сервисных услуг по откачке, вывозу нефтепродуктов, СУГ с АЗС;

			складские услуги, погрузо-разгрузочные услуги;

			эксплуатация сосудов под давлением, грузоподъемных механизмов;

			оказание услуг по предоставлению мест для стоянки автомобильного транспорта на территории предприятия;

			приобретение, хранение и реализация промышленных и продовольственных товаров, горюче-смазочных материалов, автошин, запасных частей, узлов, агрегатов, автотранспортных средств;

			оказание услуг по проведению предрейсового и послерейсового медицинского осмотра;

			осуществление операций с ценными бумагами;

			прочая вспомогательная транспортная деятельность;

			аренда легковых автомобилей, прочих транспортных средств и оборудования;

			предоставление посреднических услуг при осуществлении перевозок;

			проведение  метрологического контроля, поверки средств измерений;

			разработка и внедрение автоматизированных систем управления ;

			оказание медицинских и лечебно-оздоровительных услуг юридическим и физическим лицам;

			организация и эксплуатация объектов туристического, социально-оздоровительного и профилактического назначения;

			организация и ведение гостиничного хозяйства;

			организация и осуществление работы кафе,  баров, столовых и других точек общественного питания;

			организация и проведение зрелищных, культмассовых и спортивных мероприятий;

			обучение, подготовка, переподготовка и повышение квалификации кадров;

			проведение работ, связанных с использованием сведений, составляющих государственную тайну;

			организация в Обществе защиты информации, содержащей государственную тайну;  

			организация и проведение в соответствии с законодательством Российской Федерации мероприятий по мобилизационной подготовке и мобилизации, гражданской обороны, воинского учета и бронирования граждан, пребывающих в запасе.

	6.3. 	Общество вправе также осуществлять любые другие виды деятельности, не запрещенные законодательством. Отдельными видами деятельности, перечень которых определен федеральными законами, Общество может заниматься только на основании получения специального разрешения (лицензии), членства в саморегулируемой организации или выданного саморегулируемой организацией свидетельства о допуске к определенному виду работ.





	Статья 7. Уставный капитал Общества. Размещенные и объявленные акции

	

	7.1. 	Уставный капитал Общества составляет 100 000 (сто тысяч) рублей. Он составляется из номинальной стоимости размещенных 100 000 (ста тысяч) обыкновенных именных акций номинальной стоимостью 1 (один) рубль каждая.

	7.2. 	Общество вправе размещать дополнительно к размещенным акциям обыкновенные именные акции в количестве 1 000 000 (один миллион) штук, номинальной стоимостью 1 (один) рубль (объявленные акции).

	7.3. 	После размещения объявленные акции предоставляют те же права, что и размещенные акции соответствующей категории (типа), предусмотренные настоящим уставом.

	7.4. 	Оплата акций Общества может осуществляться денежными средствами, вещами, долями (акциями) в уставных (складочных) капиталах других хозяйственных товариществ и обществ, государственными и муниципальными облигациями, подлежащими денежной оценке, исключительными, иными интеллектуальными правами и правами по лицензионным договорам, а также если это не запрещено законодательством иным имуществом и имущественными правами.

	7.5. 	При оплате дополнительных акций неденежными средствами размер денежной оценки имущества, вносимого в оплату акций, производится Советом директоров в соответствии с Федеральным законом «Об акционерных обществах» (далее – «Закон»).

	7.6. 	Уставный капитал Общества может быть: 

- 	увеличен путем увеличения номинальной стоимости акций или выпуска дополнительных акций;

- 	уменьшен путем уменьшения номинальной стоимости акций или путем покупки части акций в целях сокращения их общего количества. 

	7.7. 	Решения об увеличении уставного и (или) об уменьшении уставного капитала Общества принимаются Общим собранием акционеров с соблюдением требований законодательства Российской Федерации.

	7.8. 	Общество вправе приобретать размещенные им акции по решению Совета директоров.





	Статья 8. Облигации и иные эмиссионные ценные бумаги Общества

	

	8.1. 	Общество вправе размещать облигации и иные эмиссионные ценные бумаги, предусмотренные правовыми актами Российской Федерации о ценных бумагах. 

	8.2. 	Размещение Обществом облигаций и иных эмиссионных ценных бумаг осуществляется по решению Совета директоров Общества, за исключением случаев размещения эмиссионных ценных бумаг, конвертируемых в акции.

Размещение Обществом эмиссионных ценных бумаг, конвертируемых в акции, осуществляется по решению Общего собрания акционеров. 





	Статья 9. Права и обязанности акционеров Общества

	

	9.1. 	Акционеры Общества имеют право:

		участвовать в управлении делами Общества в порядке, предусмотренном законодательством;

		принимать участие в распределении прибыли Общества, получать дивиденды;

		получить, в случае ликвидации Общества, часть его имущества, оставшегося после расчетов с кредиторами, или его стоимость; 

	требовать исключения другого акционера из Общества  в случаях и в порядке, предусмотренных действующим законодательством;  

		получать информацию о деятельности Общества и знакомиться с его бухгалтерской и иной документацией в случаях и в порядке,  предусмотренных законодательством и настоящим Уставом;

			передавать (продавать, отчуждать, распоряжаться иным образом в любой иной форме) принадлежащие им и полностью оплаченные при размещении акции другим лицам;

	Акционеры Общества имеют также иные права, предусмотренные законодательством и настоящим Уставом.

	9.2. 	Акционеры Общества пользуются преимущественным правом приобретения акций, продаваемых другими акционерами, по цене предложения третьему лицу, пропорционально количеству акций, принадлежащих каждому из них.

		9.3. 	Акционеры – владельцы обыкновенных акций Общества имеют право участвовать в Общем собрании акционеров с правом голоса по всем вопросам его компетенции.

Акционеры Общества обязаны:

		не разглашать конфиденциальную информацию о деятельности Общества;

		участвовать в принятии корпоративных решений, без которых Общество не может продолжать свою деятельность, если участие Акционеров необходимо для принятия таких решений;

		не совершать действия, заведомо направленные на причинение вреда Обществу;

		не совершать действия (бездействия), которые существенно затрудняют или делают невозможным достижение целей, ради которых создано Общество.

Акционеры Общества несут также иные обязанности, предусмотренные законодательством и Уставом Общества.





	Статья 10. Резервный фонд Общества

	

	10.1. 	В Обществе создается резервный фонд в размере 5 процентов уставного капитала, который формируется путем обязательных ежегодных отчислений в размере не менее 5 процентов от чистой прибыли Общества до достижения установленного размера. 

	10.2. 	Резервный фонд предназначен для покрытия убытков Общества, а также для погашения облигаций Общества и выкупа акций Общества в случае отсутствия иных средств. Резервный фонд не может быть использован для иных целей.







Статья 11. Дивиденды Общества



	11.1. 	Общество вправе принимать решение (объявлять) о выплате дивидендов по акциям и осуществлять их выплату с учетом ограничений, установленных законодательством Российской Федерации.

	11.2. 	Дивиденды выплачиваются в денежной форме, если иное не установлено решением общего собрания акционеров о выплате дивидендов.

	11.3. 	Срок выплаты дивидендов номинальному держателю и являющемуся профессиональным участником рынка ценных бумаг доверительному управляющему, которые зарегистрированы в реестре акционеров, не должен превышать 10 рабочих дней, а другим зарегистрированным в реестре акционеров лицам - 25 рабочих дней с даты, на которую определяются лица, имеющие право на получение дивидендов.





Статья 12. Структура органов управления



	12.1. 	Органами управления Общества являются:

		высший орган управления Общества – Общее собрание акционеров;

		коллегиальный орган управления – Совет директоров;

		единоличный исполнительный орган – Генеральный директор. 

	Полномочия единоличного исполнительного органа выступать от имени Общества могут быть предоставлены нескольким лицам, действующим совместно или независимо друг от друга.

	12.2. 	Совет директоров избирается Общим собранием акционеров.

	12.3. 	Генеральный директор избирается Советом директоров Общества.





Статья 13. Общее собрание акционеров Общества



	13.1. 	Высшим органом управления Общества является Общее собрание акционеров.

	13.2. 	Общество обязано ежегодно проводить Общее собрание акционеров в срок не ранее чем через 2 месяца и не позднее чем через 6 месяцев после окончания финансового года.

	На годовом Общем собрании акционеров должны решаться вопросы об избрании Совета директоров, утверждении аудитора Общества, утверждении годовых отчетов, годовой бухгалтерской (финансовой) отчетности Общества. На годовом Общем собрании могут решаться и иные вопросы, отнесенные законодательством и настоящим Уставом к компетенции Общего собрания акционеров Общества.   

	13.3. 	Проводимые помимо годового Общие собрания акционеров являются внеочередными.

	13.4. 	Общее собрание акционеров правомочно (имеет кворум), если в нем приняли участие акционеры, обладающие в совокупности более чем половиной голосов размещенных голосующих акций Общества.

	13.5. 	При отсутствии кворума для проведения годового Общего собрания акционеров должно быть проведено повторное годовое Общее собрание акционеров с той же повесткой дня. 

	13.6. 	Повторное годовое Общее собрание акционеров проводится с соблюдением установленных законодательством Российской Федерации и настоящим Уставом процедур.

	13.7. 	Повторное Общее собрание акционеров правомочно (имеет кворум), если в нем приняли участие акционеры (их представители), обладающие в совокупности не менее чем 30 процентами голосов размещенных голосующих акций Общества.

	13.8. 	При проведении повторного Общего собрания акционеров менее чем через 40 дней после несостоявшегося Общего собрания акционеров лица, имеющие право на участие в таком Общем собрании акционеров, определяются (фиксируются) на дату, на которую определялись (фиксировались) лица, имевшие право на участие в несостоявшемся Общем собрании акционеров.

	13.9. 	Внеочередное Общее собрание акционеров проводится по решению Совета директоров Общества на основании его собственной инициативы, требования  аудитора Общества,  требования акционеров (акционера), являющихся владельцами не менее чем 10 процентов голосующих акций Общества на дату предъявления требования.

	13.10. 	Внеочередное Общее собрание акционеров созывается и проводится в порядке и сроки, установленные законодательством и настоящим Уставом. 

	13.11. 	Решение общего собрания акционеров может быть принято без проведения собрания (совместного присутствия акционеров для обсуждения вопросов повестки дня и принятия решений по вопросам, поставленным на голосование) путем проведения заочного голосования. 

	13.12. 	Общие собрания акционеров в форме совместного присутствия проводятся по месту нахождения Общества, а также могут проводиться в г. Москва или в г. Санкт-Петербург.





Статья 14. Компетенция Общего собрания акционеров Общества



внесение изменений и дополнений в Устав Общества или утверждение Устава Общества в новой редакции;

реорганизация Общества;

ликвидация Общества, назначение ликвидационной комиссии и утверждение промежуточного и окончательного ликвидационных балансов;

определение количественного состава Совета директоров Общества, избрание членов Совета директоров и досрочное прекращение их полномочий;

определение количества, номинальной стоимости, категории (типа) объявленных акций и прав, предоставляемых этими акциями;

увеличение уставного капитала Общества;

размещение Обществом облигаций и иных эмиссионных ценных бумаг, конвертируемых в акции;

уменьшение уставного капитала Общества путем уменьшения номинальной стоимости акций, путем приобретения Обществом части акций в целях сокращения их общего количества, а также путем погашения приобретенных или выкупленных Обществом акций; 

принятие решения о передаче полномочий единоличного исполнительного органа Общества другому хозяйственному обществу (управляющей организации) или индивидуальному предпринимателю (управляющему), утверждение такой управляющей организации и такого управляющего и условий договора с ними;

утверждение (назначение) аудиторской организации или индивидуального аудитора Общества;

выплата (объявление) дивидендов по результатам первого квартала, полугодия, девяти месяцев отчетного года;

утверждение годовых отчетов, и  бухгалтерской (финансовой) отчетности, а также распределение прибыли (в том числе выплата (объявление) дивидендов, за исключением выплаты (объявления) дивидендов по результатам первого квартала, полугодия, девяти месяцев отчетного года) и убытков Общества по результатам отчетного года; 

определение порядка ведения Общего собрания акционеров;

дробление и консолидация акций;

принятие решений о согласии на совершение Обществом или о последующем одобрении сделок, в совершении которых имеется заинтересованность,  в случаях, предусмотренных Статьей 23 настоящего Устава;

принятие решений о согласии на совершение Обществом или о последующем одобрении крупных сделок, в случаях, предусмотренных главой Х Закона;

приобретение Обществом размещенных акций в случаях, предусмотренных Законом;

принятие решения об участии в финансово-промышленных группах, ассоциациях и иных объединениях коммерческих организаций;

утверждение не являющихся учредительными документами внутреннего регламента Общества или иных внутренних документов Общества, регулирующих корпоративные отношения;

определение порядка приема в состав акционеров Общества и исключения из числа ее акционеров, кроме случаев, если такой порядок определен законом;

предоставление полномочий единоличного исполнительного органа Общества нескольким лицам, действующим совместно;

образование в Обществе нескольких единоличных исполнительных органов, действующих независимо друг от друга;

принятие решения о страховании Обществом ответственности членов Совета директоров и/или Генерального директора Общества;

установление членам Совета директоров Общества вознаграждения и (или) компенсации расходов, связанных с исполнением ими функций членов Совета директоров в период исполнения ими своих обязанностей, определение размеров таких вознаграждений и компенсаций;

принятие решений о совершении сделок (в том числе нескольких взаимосвязанных сделок) на сумму, превышающую 100 000 000 (Сто миллионов) рублей (или эквивалент указанной суммы в любой другой валюте), и сделок (в том числе нескольких взаимосвязанных сделок) с имуществом Общества, стоимость которого на основании данных бухгалтерской отчетности Общества за последний отчетный период, предшествующий дню принятия решения о совершении таких сделок, превышает 100 000 000 (сто миллионов) рублей (или эквивалент указанной суммы в любой другой валюте), за исключением сделок, совершаемых в процессе обычной хозяйственной деятельности Общества, а также, за исключением сделок с ПАО «Газпром нефть» и обществами, входящими в группу лиц с ним, когда такая сделка или несколько взаимосвязанных сделок является(-ются) сделкой, в совершении которой имеется заинтересованность);

решение иных вопросов, предусмотренных законодательством Российской Федерации и настоящим Уставом.





Статья 15. Решения Общего собрания акционеров Общества



	15.1. 	Решение вопросов, указанных в п. 14.1. настоящего Устава, относится к исключительной компетенции Общего собрания акционеров Общества и не может быть передано на рассмотрение Совету директоров или Генеральному директору Общества, за исключением случаев, предусмотренных законодательством.

	Решения по вопросам, предусмотренным подпунктами 1 - 3, 5, 16, 17, пункта 14.1 настоящего Устава, принимаются Общим собранием акционеров большинством в три четверти голосов акционеров - владельцев голосующих акций Общества, принимающих участие в Общем собрании акционеров.

	Решения по вопросам размещения акций и эмиссионных ценных бумаг в случаях, предусмотренных статьей 39 Закона, принимаются Общим собранием акционеров большинством в три четверти голосов акционеров - владельцев голосующих акций Общества, принимающих участие в Общем собрании акционеров.

	15.2. 	Решения по вопросам, предусмотренным подпунктами 2, 6, 14-19 пункта 14.1. настоящего Устава, принимаются Общим собранием акционеров только по предложению Совета директоров Общества.

	15.3. 	Решение Общего собрания акционеров по остальным вопросам, поставленным на голосование, принимается большинством голосов акционеров - владельцев голосующих акций Общества, принимающих участие в Общем собрании акционеров, если для принятия решения Законом или настоящим Уставом не установлено иное.

	15.4. 	Общее собрание акционеров не вправе принимать решения по вопросам, не внесенным в повестку дня, а также изменять повестку дня, за исключением случаев, если при принятии решения, не включенного в повестку дня Общего собрания акционеров Общества, или при изменении повестки дня Общего собрания акционеров Общества присутствовали все акционеры Общества.

	15.5. 	Принятие Общим собранием акционеров решения и состав акционеров, присутствовавших при его принятии, подтверждаются путем нотариального удостоверения или удостоверения лицом, осуществляющим ведение реестра акционеров Общества и выполняющим функции счетной комиссии.





Статья 16. Предложения в повестку дня, информация о проведении Общего собрания акционеров Общества



	16.1. 	Повестка дня Общего собрания акционеров утверждается Советом директоров Общества в порядке, установленном законодательством и настоящим Уставом.

	16.2. 	Акционеры (акционер), являющиеся в совокупности владельцами не менее чем 2 процентов голосующих акций Общества, вправе внести вопросы в повестку дня годового Общего собрания акционеров Общества и выдвинуть кандидатов в Совет директоров Общества и Счетную комиссию Общества, число которых не может превышать количественный состав соответствующего органа, а также кандидата на должность единоличного исполнительного органа Общества. 

	Указанные предложения должны поступить в Общество не позднее 60 дней после окончания отчетного года. 

	16.3. 	Помимо вопросов, предложенных для включения в повестку дня Общего собрания акционеров акционерами, а также в случае отсутствия таких предложений, отсутствия или недостаточного количества кандидатов, предложенных акционерами для образования соответствующего органа, Совет директоров Общества вправе включить в повестку дня Общего собрания акционеров вопросы или кандидатов в список кандидатур по своему усмотрению.

	16.4. 	Сообщение о проведении общего собрания акционеров должно быть сделано не позднее чем за 20 дней, а сообщение о проведении общего собрания акционеров, повестка дня которого содержит вопрос о реорганизации общества, - не позднее чем за 30 дней до даты его проведения.

	В случаях, если предлагаемая повестка дня внеочередного Общего собрания акционеров содержит вопрос об избрании членов Совета директоров и/или вопрос о реорганизации общества в форме слияния, выделения или разделения и об избрании Совета директоров (наблюдательного совета) общества, создаваемого путем указанной реорганизации и/или вопрос об образовании единоличного исполнительного органа и (или) досрочном прекращении его полномочий в соответствии с п. 6 и п. 7. ст. 69 Закона, сообщение о проведении внеочередного общего собрания акционеров должно быть сделано не позднее чем за 50 дней до дня его проведения.





	Статья 17. Участие и голосование на Общем собрании акционеров, протокол Общего собрания акционеров Общества

	

	17.1. 	Акционеры участвуют в Общем собрании акционеров Общества лично или через своих представителей.

	17.2. 	Представитель акционера на Общем собрании акционеров Общества действует в соответствии с полномочиями, основанными на указаниях федеральных законов или актов уполномоченных на то государственных органов или органов местного самоуправления либо доверенности, составленной в письменной форме. Доверенность на голосование должна содержать сведения о представляемом и представителе (для физического лица - имя, данные документа, удостоверяющего личность (серия и (или) номер документа, дата и место его выдачи, орган, выдавший документ), для юридического лица - наименование, сведения о месте нахождения). Доверенность на голосование должна быть удостоверена нотариально или оформлена в ином виде, предусмотренном требованиями законодательства.

	17.3. 	На Общем собрании акционеров председательствует Председатель Совета директоров, а в случае его отсутствия – другое лицо в соответствии с решением Совета директоров. При отсутствии указанных лиц председательствующий избирается  Общим собранием акционеров.

	17.4. 	Голосование на Общем собрании акционеров осуществляется по принципу: «одна голосующая акция Общества - один голос», за исключением случаев, когда законодательством или настоящим Уставом, предусмотрен иной принцип голосования.

	17.5. 	По итогам Общего собрания акционеров составляется протокол  Общего собрания акционеров и протокол об итогах голосования. Протокол об итогах голосования подлежит приобщению к протоколу Общего собрания акционеров.

	17.6.  	Протокол Общего собрания акционеров Общества составляется не позднее трех рабочих дней после закрытия Общего собрания акционеров в 2-х экземплярах и подписывается председательствующим на Общем собрании акционеров и секретарем Общего собрания акционеров. 





Статья 18. Совет директоров Общества



	18.1. 	Совет директоров Общества осуществляет общее руководство деятельностью Общества, за исключением решения вопросов, отнесенных к компетенции Общего собрания акционеров.

	18.2. 	По решению Общего собрания акционеров членам Совета директоров Общества в период исполнения ими своих обязанностей могут выплачиваться вознаграждение и (или) компенсироваться расходы, связанные с исполнением ими функций членов Совета директоров Общества. Размеры таких вознаграждений и компенсаций устанавливаются решением Общего собрания акционеров.

	18.3. 	Члены Совета директоров Общества избираются Общим собранием акционеров большинством голосов на срок до принятия Общим собранием акционеров решения о прекращении их полномочий. Количественный состав Совета директоров определяется решением Общего собрания акционеров Общества. Каждый член Совета директоров имеет один голос.

	18.4.	Полномочия любого члена (всех членов) Совета директоров Общества могут быть прекращены в любое время по решению Общего собрания акционеров Общества, принятому большинством голосов акционеров Общества.

	



	Статья 19. Компетенция Совета директоров Общества

	

	19.1.	К компетенции  Совета директоров Общества относятся следующие вопросы:

	определение приоритетных направлений деятельности Общества, принципов образования и использования его имущества, утверждение перспективных планов и основных программ деятельности Общества, в том числе утверждение стратегии развития Общества (функциональных стратегий), утверждение бизнес-плана (скорректированного бизнес-плана), рассмотрение отчетов об итогах выполнения бизнес-плана в рамках квартальных отчетов Общества, утверждение среднесрочной инвестиционной программы (скорректированной среднесрочной инвестиционной программы) Общества, внесение изменений в указанные документы, рассмотрение промежуточных результатов и итогов их выполнения;

	созыв годового и внеочередного Общих собраний акционеров, за исключением случаев, установленных Законом;

	утверждение повестки дня Общего собрания акционеров;

	определение даты составления списка лиц, имеющих право на участие в Общем собрании акционеров, и другие, отнесенные Федеральным законом «Об акционерных обществах» к компетенции Совета директоров вопросы, связанные с подготовкой и проведением Общего собрания акционеров;

	предварительное утверждение годового отчета Общества;

	размещение Обществом облигаций или иных эмиссионных ценных бумаг, за исключением акций; 

	размещение Обществом облигаций и иных эмиссионных ценных бумаг за исключением случаев размещения эмиссионных ценных бумаг, конвертируемых  в акции;

	определение цены (денежной оценки) имущества, цены размещения или порядка ее определения и цены выкупа  эмиссионных ценных бумаг в случаях, предусмотренных законодательством и настоящим Уставом;

	приобретение размещенных Обществом акций, облигаций и иных ценных бумаг в случаях, предусмотренных законодательством Российской Федерации и настоящим Уставом; 

	рекомендации Общему собранию акционеров Общества по размеру дивиденда по акциям Общества,  порядку и срокам его выплаты;

	использование резервного фонда и иных фондов Общества;

	избрание Генерального директора Общества, досрочное прекращение его полномочий, утверждение условий трудового договора с ним.

		В случае не принятия Советом директоров Общества решения об образовании (избрании) Генерального директора Общества, Совет директоров Общества рассматривает вопрос о назначении временно-исполняющего обязанности Генерального директора Общества, утверждении трудового договора с ним, а также вопрос о досрочном прекращении его полномочий;

	установление размера вознаграждения и денежных компенсаций Генеральному директору. 

	утверждение постановки целей и системы (показателей) премирования Генерального директора Общества, а также утверждение оценки выполнения целей Генеральным директором Общества;

	рассмотрение отчетов Генерального директора о деятельности Общества, о выполнении решений Общего собрания акционеров и Совета директоров Общества; рассмотрение отчетов Генерального директора по исполнению поручений Совета директоров Общества;

	осуществление контроля за исполнением решений Общего собрания Участников Общества, иной деятельностью Генерального директора Общества, заслушивание отчетов Генерального директора в период между Общими собраниями Участников;

	привлечение Генерального директора Общества к дисциплинарной и/или материальной ответственности; 

	предоставление Генеральному директору разрешения на работу по совместительству у другого работодателя;

	согласование назначения и освобождения от занимаемой должности заместителей Генерального директора Общества и Главного бухгалтера Общества;

	назначение Секретаря Совета директоров Общества;

	утверждение организационной структуры Общества в случаях, предусмотренных нормативно-методическими документами, регламентирующими работу с организационной структурой Общества;

	создание филиалов, открытие представительств Общества, утверждение положений о филиалах, представительствах Общества, внесение в них изменений, принятие решений о прекращении деятельности филиалов, закрытии представительств Общества;

	утверждение регистратора Общества и условий договора с ним, а также расторжение договора с ним;

	принятие решений о согласии на совершение Обществом или последующее одобрение крупных сделок в случаях, предусмотренных главой Х Закона;

	принятие решений о согласии на совершение Обществом или последующее одобрение сделок, в совершении которых имеется заинтересованность, в случаях, предусмотренных Статьей 23 настоящего Устава;

	принятие решений о совершении сделок, связанных с получением или предоставлением Обществом займов, кредитов (в том числе вексельных), предоставлением гарантий и поручительств, за исключением сделок с ПАО «Газпром нефть» и обществами, входящими в группу лиц с ним;

	принятие решений о совершении сделок, связанных с приобретением или отчуждением долей в уставных капиталах, акций, облигаций, закладных, векселей (или иных ценных бумаг или любых прав в отношении такого имущества (путем конвертации, подписки, опционов или иным способом) любой компании или другой организации, за исключением сделок с ПАО «Газпром нефть» и обществами, входящими в группу лиц с ним; 

	принятие решений о совершении сделок, связанных с передачей в залог или установлением иных обременений в отношении принадлежащих Обществу долей в уставных капиталах или акций, за исключением сделок с ПАО «Газпром нефть» и обществами, входящими в группу лиц с ним;

	принятие решений о создании Обществом других юридических лиц, об участии или прекращении участия Общества в других организациях, за исключением организаций, указанных в п.п.18 п. 14.1. настоящего Устава;

	принятие решений о заключении Обществом акционерных соглашений, соглашений об осуществлении прав участников (корпоративных договоров), опционных соглашений, договоров простого товарищества и иных соглашений о совместной деятельности, за исключением сделок с ПАО «Газпром нефть» и обществами, входящими в группу лиц с ним; 

	принятие решений о совершении сделок (в том числе нескольких взаимосвязанных сделок) на сумму свыше 50 000 000 (Пятидесяти миллионов) рублей (или эквивалента указанной суммы в любой другой валюте), но не превышающую 100 000 000 (Сто миллионов) рублей (или эквивалент указанной суммы в любой другой валюте), а также о совершении сделок (в том числе нескольких взаимосвязанных сделок) с имуществом Общества, стоимость которого на основании данных бухгалтерской отчетности Общества за последний отчетный период, предшествующий дню принятия решения о совершении таких сделок, превышает 50 000 000 (Пятьдесят миллионов) рублей (или эквивалент указанной суммы в любой другой валюте), но не превышает 100 000 000 (Сто миллионов) рублей (или эквивалент указанной суммы в любой другой валюте), за исключением случаев, когда одобрение указанных сделок относится к компетенции Общего собрания Участников Общества, за исключением сделок, совершаемых в процессе обычной хозяйственной деятельности Общества, а также, за исключением сделок с ПАО «Газпром нефть» и обществами, входящими в группу лиц с ним;

	принятие решений о совершении сделок, связанных с продажей, иным отчуждением в том числе путем сноса и/или частичной или полной реконструкции, осуществляемой по предложению/требованию государственных органов или иных третьих лиц, изъятия для государственных нужд, отказа от собственности (кроме случаев фактической утраты) или обременением недвижимого имущества (за исключением случаев обременения недвижимого имущества, указанных в п.п. 33 п. 19.1. настоящего Устава и сервитутов) или о совершении сделки, связанной с возможностью отчуждения прямо или косвенно недвижимого имущества Общества, за исключением сделок с ПАО «Газпром нефть» и обществами, входящими в группу лиц с ним; 

	принятие решений о совершении сделок, связанных с передачей в аренду или субаренду недвижимого имущества Общества, за исключением помещений и непрофильного имущества признанного таковым в соответствии с решением Совета директоров Общества, а также за исключением сделок с ПАО «Газпром нефть» и обществами, входящими в группу лиц с ним; 

	принятие решений о совершении сделок, связанных с получением в аренду/субаренду недвижимого имущества на срок 1 год и более и на неопределенный срок, за исключением сделок, связанных с арендой/субарендой земельных участков/частей земельных участков, а также за исключением сделок с ПАО «Газпром нефть» и обществами, входящими в группу лиц с ним;

	принятие решений об отказе от аренды, субаренды земельных участков, за исключением сделок с ПАО «Газпром нефть» и обществами, входящими в группу лиц с ним; 

	принятие решений о совершении сделок мены, дарения, иных сделок, предусматривающих безвозмездное отчуждение имущества Общества либо оплату (встречное предоставление) в неденежной форме, за исключением сделок с ПАО «Газпром нефть» и обществами, входящими в группу лиц с ним;

	предварительное определение позиции Общества при голосовании (принятии решений) по вопросам, относящимся к компетенции Общего собрания акционеров (участников) хозяйственных обществ, акционером (участником) которых является Общество;

	утверждение (принятие) документов, регулирующих внутреннюю деятельность Общества (внутренних документов Общества), за исключением документов, регулирующих корпоративные отношения;

	принятие решения о заключении Обществом мирового соглашения по судебному делу с ценой иска на сумму свыше 50 000 000 (Пятидесяти миллионов) рублей без учета  или эквивалента указанной суммы в любой другой валюте (либо предметом которого является имущество, стоимость которого превышает 50 000 000 (Пятьдесят миллионов) рублей без учета НДС,  и/или мирового соглашения, предполагающего выплату денежных средств, передачу имущества Общества либо уменьшение/зачет сумм, причитающихся в пользу Общества,  на сумму свыше денежной суммы, эквивалентной 50 000 000 (пятидесяти миллионам) без учета НДС рублей или эквивалента указанной суммы в любой другой валюте и/или мирового соглашения, предметом которого является имущество, стоимость которого превышает 50 000 000 (пятьдесят миллионов) рублей; 

	определение оплаты услуг аудитора Общества;

	иные вопросы, отнесенные законодательством или настоящим Уставом к компетенции Совета директоров Общества.

	

	

Статья 20. Председатель Совета директоров Общества



	20.1.	Председатель Совета директоров Общества избирается членами Совета директоров Общества из их числа большинством голосов от общего числа членов Совета директоров Общества.

	Генеральный директор Общества не может быть одновременно Председателем Совета директоров Общества.

	20.2.	Председатель Совета директоров Общества организует его работу, созывает заседания Совета директоров Общества, утверждает повестку дня заседаний и председательствует на заседаниях Совета директоров, организует на заседаниях ведение протокола.

	20.3.	В случае отсутствия Председателя Совета директоров Общества его функции осуществляет один из членов Совета директоров Общества по решению Совета директоров Общества. 





Статья 21. Заседания Совета директоров Общества



	21.1. 	Решения Совета директоров Общества могут приниматься на очных заседаниях и заочным голосованием (опросным путем).

	21.2.	Заседания Совета директоров Общества созываются Председателем Совета директоров Общества по его собственной инициативе, а также по требованию члена Совета директоров, аудитора Общества, Генерального директора Общества. 

	В отсутствие Председателя Совета директоров Общества заседания Совета директоров созываются членом Совета директоров, исполняющим его функции в соответствии с пунктом 20.3. настоящего Устава.

	21.3. 	Кворум для проведения  заседания (заочного голосования) Совета директоров Общества составляет не менее половины от числа избранных членов Совета директоров Общества. При определении наличия кворума и результатов голосования на заседании Совета директоров Общества учитывается письменное мнение члена Совета директоров Общества, отсутствующего на заседании Совета директоров Общества. Член Совета директоров Общества также считается присутствующим на заседании, если он участвует в заседании по селекторной связи, или иным способом может оперативно в процессе заседания высказывать свое мнение и голосовать по обсуждаемым вопросам.

	При проведении заочного голосования принявшими участие в голосовании считаются члены Совета директоров, представившие к дате голосования свою позицию по проекту решения («за», или  «против», или «воздержался») в письменной форме, в том числе по факсу или в форме электронного сообщения. 

	21.4. 	Решения на заседании (заочном голосовании) Совета директоров принимаются большинством голосов членов Совета директоров, принимающих участие в заседании (заочном голосовании) и (или) выразивших свое мнение письменно, если Законом не предусмотрено иное.





Статья 22. Генеральный директор Общества



	22.1. 	Единоличным исполнительным органом Общества является Генеральный директор. Генеральный директор избирается Советом директоров Общества сроком на 3 (Три) года. Полномочия Генерального директора могут быть досрочно прекращены по решению Совета директоров Общества.

	Если деятельность Общества связана с работой со сведениями, составляющими государственную тайну, на должность Генерального директора избирается лицо, имеющее соответствующую форму допуска к государственной тайне и необходимую подготовку, предусмотренную действующим законодательством, по организации работ по защите государственной тайны в Обществе.

	22.2. 	Трудовой договор между Обществом и Генеральным директором подписывается  от имени Общества Председателем Совета директоров или лицом, уполномоченным Советом директоров. 

	22.3. 	К компетенции Генерального директора относятся все вопросы руководства текущей деятельностью Общества, за исключением вопросов, отнесенных действующим законодательством и настоящим Уставом к компетенции Общего собрания акционеров или Совета директоров Общества.

Генеральный директор Общества:

1) 	организует выполнение решений Общего собрания акционеров и Совета директоров Общества;

2) 	без доверенности действует от имени Общества, в том числе представляет его интересы, совершает сделки, утверждает штаты Общества, его филиалов и представительств, издает приказы, распоряжения и в пределах своей компетенции дает указания, обязательные для исполнения всеми работниками Общества, определяет условия оплаты труда работников Общества, его представительств, филиалов и иных обособленных подразделений, а также издает приказы о назначении работников, их переводе и увольнении, применяет меры поощрения и налагает дисциплинарные взыскания, при условии, что:

- 	сделки и иные действия, решение о совершении которых в соответствии с действующим законодательством и настоящим Уставом отнесено к компетенции Общего собрания акционеров или Совета директоров Общества, могут совершаться Генеральным директором только при наличии и в соответствии с таким решением, соответственно, Общего собрания акционеров или Совета директоров Общества;

- 	назначение на должности, которые в соответствии с настоящим Уставом должны быть предварительно согласованы с Советом директоров Общества, могут производиться Генеральным директором только при наличии соответствующего решения Совета директоров Общества;

3) 	утверждает внутренние документы, регламентирующие текущую деятельность и порядок оперативного управления Обществом, обеспечивает контроль их исполнения, подписывает все документы от имени Общества;

4) 	определяет организационную структуру Общества перед ее вынесением на утверждение Советом директоров Общества;

5) 	направляет уведомления кредиторам Общества в случае реорганизации или ликвидации Общества, предстоящего уменьшения Уставного капитала Общества и в иных определенных законодательством случаях;

6) 	выдает доверенности, предоставляющие полномочия действовать от имени Общества по вопросам, не выходящим за пределы компетенции Генерального директора;

7) 	в рамках своей компетенции решает вопросы развития Общества и его деятельности;

8) 	исполняет другие функции, возложенные на него Законом, Общим собранием акционеров, Советом директоров, а также настоящим Уставом.

Генеральный директор обязан информировать контрагентов Общества о существующих ограничениях его полномочий в отношении заключения сделок, установленных настоящим Уставом.

Генеральный директор обязан лично присутствовать на очных заседаниях Совета директоров Общества. Допускается участие Генерального директора в заседании Совета директоров Общества по видеоконференцсвязи, только при наличии согласия Председателя Совета директоров Общества.

	22.4. 	Генеральный директор несет персональную ответственность за организацию работ, задач по защите и сохранению государственной тайны, принимает решение о допуске (отказе в допуске), либо прекращении допуска должностных лиц и граждан к государственной тайне и условиях заключения с этими лицами трудовых договоров.





	Статья 23. Порядок одобрения сделок, в совершении которых имеется заинтересованность

	

	23.1. 	Настоящим Уставом установлен отличный от установленного Законом порядок одобрения сделок, в совершении которых имеется заинтересованность: 

	23.1.1. Сделки, в совершении которых имеется заинтересованность, требуют обязательного предварительного согласия на их совершение, за исключением случаев, указанных в п. 23.1.2. и п. 23.1.3 настоящего Устава. 

	Если цена сделки или стоимость имущества, являющегося предметом сделки, превышает 10 процентов балансовой стоимости активов Общества, определенной на основании данных бухгалтерской отчетности за последний отчетный период, совершение такой сделки требует обязательного предварительного согласия Общего собрания акционеров Общества.

	Если цена сделки или стоимость имущества, являющегося предметом сделки, не превышает 10 процентов балансовой стоимости активов Общества, определенной на основании данных бухгалтерской отчетности за последний отчетный период, совершение такой сделки требует обязательного предварительного согласия Совета директоров Общества.

	Во избежание сомнений, требования настоящего п. 23.1.1. Устава не применимы в случаях, установленных п. 2 ст. 81 Закона. 

	23.1.2. Указанное в п. 23.1.1. настоящего Устава требование не распространяется на сделки, заключаемые Обществом с ПАО «Газпром нефть» и / или обществами, входящими в группу лиц с ПАО «Газпром нефть». В отношении сделок, заключаемых Обществом с ПАО «Газпром нефть» и / или обществами, входящими в группу лиц с ПАО «Газпром нефть», не применим установленный Законом порядок одобрения сделок, в совершении которых имеется заинтересованность, в том числе положения Закона об обязанности извещать указанных в Законе лиц о сделке, в совершении которой имеется заинтересованность.  

	23.1.3. Указанное в п. 23.1.1. настоящего Устава требование не распространяется на сделки, заключаемые Обществом с обществами, не входящими в группу лиц с                   ПАО «Газпром нефть», но в которых ПАО «Газпром нефть» прямо или косвенно владеет не менее 50 процентами голосующих акций (долей) в их уставном капитале. В отношении таких сделок применим установленный Законом порядок одобрения сделок, в совершении которых имеется заинтересованность, в том числе положения Закона об обязанности извещать указанных в Законе лиц о сделке, в совершении которой имеется заинтересованность.



Статья 24. Действие Устава Общества



	24.1. 	Настоящий Устав, а также все изменения и дополнения к нему, вступают в силу для третьих лиц с момента их государственной регистрации, а в установленных действующим законодательством случаях - с момента уведомления регистрирующего органа.

	24.2. 	Акционеры и органы Общества обязаны руководствоваться настоящим Уставом и всеми изменениями и дополнениями к нему с момента их утверждения общим собранием акционеров Общества, а в установленных действующим законодательством случаях - Советом директоров.

	24.3. 	В случае противоречия положений настоящего Устава действующему законодательству Общество и акционеры руководствуются положениями действующего законодательства.

	24.4. 	Недействительность любого положения настоящего Устава не влечет недействительности остальных его положений. В случае вступления в силу новых нормативных актов, в соответствии с которыми отдельные положения настоящего Устава становятся недействительными, и которые требуют внести изменения в Устав, акционеры обязаны принять решения о внесении соответствующих изменений в настоящий Устав.

	

	

2

"""

sample_for_ner = """

г. Омск, 

2018 г.



	Статья 1. Общие положения

	

	1.1. 	Акционерное общество «Газпромнефть-Транспорт» (в дальнейшем именуемое – «Общество»), ранее именуемое открытое акционерное общество «Газпромнефть-Транспорт», учреждено с наименованием «Открытое акционерное общество «Сибнефть-Ярославнефтепродукт» в соответствии с законодательством Российской Федерации и зарегистрировано 06 июня 2005 г. Межрайонной инспекцией Федеральной налоговой службы №5 по Ярославской области, ОГРН 1057600596877.

	31 декабря 2010 г. Открытое акционерное общество «Сибнефть-Ярославнефтепродукт» переименовано в  Открытое акционерное общество «Газпромнефть-Иваново».

	«19» июня 2013 г. Открытое акционерное общество «Газпромнефть-Иваново» переименовано в  Открытое акционерное общество «Газпромнефть-Транспорт».

22 июня 2015 года Открытое акционерное общество «Газпромнефть-Транспорт» переименовано в Акционерное общество «Газпромнефть-Транспорт».

	1.2. Правовое положение Общества, права и обязанности его участников определяются Гражданским кодексом Российской Федерации, Федеральным законом «Об акционерных обществах», другими правовыми актами Российской Федерации (далее – «Закон», «законодательство») и настоящим Уставом. 

	1.3. Срок деятельности Общества не ограничен.





	Статья 2. Фирменное наименование и  место нахождения Общества

	

	2.1. 	Фирменное наименование Общества на русском языке:

	  - полное – Акционерное общество «Газпромнефть-Транспорт»;

	  - сокращенное – АО «Газпромнефть-Транспорт».

	2.2. 	Место нахождения Общества: Российская Федерация, город Омск.





Статья 3. Юридический статус Общества



	3.1. 	Общество считается созданным со дня внесения в Единый государственный реестр юридических лиц соответствующей записи, имеет в собственности обособленное имущество, учитываемое на его самостоятельном балансе, может от своего имени приобретать и осуществлять имущественные и личные неимущественные права, нести  обязанности, быть истцом и ответчиком в суде.

	3.2.  	Общество имеет гражданские права и несет обязанности, необходимые для осуществления любых видов деятельности, не запрещенных федеральными законами.

	3.3. 	Общество является дочерним обществом ПАО «Газпром нефть» (ОГРН 1025501701686).  

	ПАО «Газпром нефть» вправе давать Обществу указания и (или) согласие на заключение сделок. 

	3.4.  	Акционеры не отвечают по обязательствам Общества, за исключением случаев, предусмотренных законодательством.

	3.5. 	Акционеры, не полностью оплатившие акции, несут солидарную ответственность по обязательствам Общества в пределах неоплаченной части стоимости принадлежащих им акций.

	3.6.	Акционерами Общества могут быть граждане и юридические лица.

	3.7. 	Общество в соответствии с законодательством открывает расчетные и иные счета в учреждениях банков, в том числе за рубежом, в рублях и иностранной валюте.

	3.8. 	Общество является собственником имущества, переданного ему акционерами в качестве оплаты акций.

	3.9. 	Общество вправе в установленном порядке участвовать в создании на территории Российской Федерации и за её пределами других организаций, приобретать доли (акции) в их уставных капиталах, здания, сооружения, землю, права пользования природными ресурсами, ценные бумаги, а также любое другое имущество, которое в соответствии с законодательством может быть объектом права собственности юридического лица.

	3.10. 	Общество ведет бухгалтерский, статистический и налоговый учет в соответствии с законодательством. 

	3.11. Общество имеет круглую печать, содержащую его полное фирменное наименование на русском языке и указание на место его нахождения. Общество может иметь зарегистрированные в установленном порядке  товарные знаки, знаки обслуживания иные средства визуальной идентификации, промышленные образцы, бланки, штампы с указанием своего наименования на русском и на любом иностранном языке.

	3.12. 	При реорганизации  Общества сведения, составляющие государственную тайну, и их носители подлежат передаче правопреемнику Общества, если этот правопреемник имеет полномочия по проведению работ с использованием сведений, составляющих государственную тайну. В противном случае указанные сведения и их носители подлежат в установленном порядке сдаче на архивное хранение, или уничтожению, или передаются органу, в распоряжение которого в соответствии со статьей 9 Закона «О государственной тайне» находятся соответствующие сведения.

	3.13. 	При ликвидации Общества сведения, составляющие государственную тайну, и их носители подлежат в установленном порядке сдаче на архивное хранение, или уничтожению, или передаются органу, в распоряжении которого в соответствии с Федеральным законом «О государственной тайне» находятся соответствующие сведения.





Статья 4. Ответственность Общества



	4.1. 	Общество несет ответственность по своим обязательствам всем принадлежащим ему имуществом.

	4.2. 	Общество не отвечает по обязательствам своих акционеров.

	4.3. 	Государство и его органы не отвечают по обязательствам Общества, равно как и Общество не отвечает по обязательствам государства и его органов.





Статья 5. Филиалы и представительства, дочерние и зависимые общества

	

	5.1. 	Общество может по решению Совета директоров создавать филиалы и открывать представительства, как на территории Российской Федерации, так и за ее пределами.

	Филиалы и представительства Общества не являются юридическими лицами.

	Филиалы и представительства Общества осуществляют деятельность от имени Общества и действуют на основании Положений, утвержденных Советом директоров  Общества. Общество несет ответственность за деятельность филиалов и представительств. 

	5.2. 	Общество может иметь дочерние общества с правами юридического лица, как на территории Российской Федерации, так и за ее пределами. 

	5.3. 	Создание Обществом дочерних обществ, открытие филиалов и представительств за пределами территории Российской Федерации осуществляется в соответствии с настоящим Уставом и законодательством иностранного государства по месту нахождения дочерних обществ, филиалов и представительств, если иное не предусмотрено международным договором Российской Федерации.





	Статья 6. Цель создания и основные виды деятельности Общества



	6.1. 	Целью деятельности Общества является извлечение прибыли за счет осуществления любых, не запрещенных законом, видов деятельности.

	6.2. 	Основными видами деятельности Общества являются:

"""

"""### 2. NER Pattern factory"""

class NerPatternFactory(AbstractPatternFactory):

  def create_pattern(self, pattern_name, ppp):
    _ppp = (ppp[0].lower(), ppp[1].lower(), ppp[2].lower())
    fp = FuzzyPattern(_ppp, pattern_name)
    self.patterns.append(fp)
    self.patterns_dict[pattern_name] = fp
    return fp

  def __init__(self, embedder):
    AbstractPatternFactory.__init__(self, embedder)

    self.patterns_dict = {}

    self._build_ner_patterns()
    self.embedd()


  def _build_ner_patterns(self):
    def cp(name, tuples):
      return self.create_pattern(name, tuples)

    for o_type in org_types.keys():
      cp(o_type, ('', org_types[o_type], '"'))


    cp('ner_org.1', ('Полное', 'фирменное наименование', 'общества на русском языке:'))
    

    cp('ner_org.6', ('', 'ОБЩИЕ ПОЛОЖЕНИЯ', ''))
    
    cp('ner_org.2', ('', 'фирменное', ''))
    cp('ner_org.3', ('', 'русском', ''))
    cp('ner_org.4', ('', 'языке', ''))
    cp('ner_org.5', ('', 'полное', ''))

    cp('nerneg_1', ('общество имеет', 'печать', ''))
    cp('nerneg_2', ('', 'сокращенное', ''))
    cp('nerneg_3', ('на', 'английском', 'языке'))


NerPF = NerPatternFactory(embedder)

"""### NER -- fallback method 
#### In memory of ஸ்ரீனிவாஸ ராமானுஜன் ஐயங்கார்
for the case headline is not found
"""

def _build_org_type_attention_vector(subdoc: CharterDocument):
  attention_vector_neg = make_soft_attention_vector(subdoc, 'nerneg_1', blur=80)
  attention_vector_neg = 1 + (1 - attention_vector_neg)  # normalize(attention_vector_neg * -1)
  return attention_vector_neg

"""### NER-2
based on detecting document structure and headlines
"""

# ------------------------------------------------------------------------------
def _detect_org_type_and_name(section, render=False):
  s_attention_vector_neg = _build_org_type_attention_vector(section)

  dict_org = {}
  best_type = None
  max = 0
  for org_type in org_types.keys():

    vector = section.distances_per_pattern_dict[org_type] * s_attention_vector_neg
    if render:
      print('_detect_org_type_and_name, org_type=', org_type, section.distances_per_pattern_dict[org_type][0:10])

    idx = np.argmax(vector)
    val = section.distances_per_pattern_dict[org_type][idx]
    if val > max:
      max = val
      best_type = org_type

    dict_org[org_type] = [idx, val]

  if render:
    print('_detect_org_type_and_name', dict_org)

  return dict_org, best_type



# ------------------------------------------------------------------------------
def detect_ners(section, render=False):
  assert section is not None
  
  section.embedd(NerPF)
  section.calculate_distances_per_pattern(NerPF)

  dict_org, best_type = _detect_org_type_and_name(section, render)

  if render:
    render_color_text(section.tokens_cc, section.distances_per_pattern_dict[best_type], _range=[0, 1])

  start = dict_org[best_type][0]
  start = start + len(NerPF.patterns_dict[best_type].embeddings)
  end = 1 + find_ner_end(section.tokens, start)

  orgname_sub_section = section.subdoc(start, end)
  org_name = untokenize(orgname_sub_section.tokens_cc)

  if render:
    render_color_text(orgname_sub_section.tokens_cc, orgname_sub_section.distances_per_pattern_dict[best_type],
                      _range=[0, 1])
    print('Org type:', org_types[best_type], dict_org[best_type])

  rez = {
    'type': best_type,
    'name': org_name,
    'type_name': org_types[best_type],
    'tokens': section.tokens_cc,
    'attention_vector': section.distances_per_pattern_dict[best_type]
  }

  return rez

# def detect_org_name(_doc, render=False):  
  
#   _headline_indexes = _doc.structure.get_lines_by_level(0)
#   _embedded_headlines = embedd_headlines(_headline_indexes, _doc, NerPF)
#   try:
#     bi, distance_by_headline, attention_v = find_best_headline_by_pattern_prefix(_headline_indexes, _embedded_headlines, 'ner_org', 1.8, render=render)
#     hl_struct = {'index': bi,
#                'weight': distance_by_headline[bi],
#                'type': 'ner_org',
#                'embedded': _embedded_headlines[bi],
#                'attention_v': attention_v}
#     subdoc = _doc_section_under_headline(_doc, hl_struct, _headline_indexes, embedd_factory=NerPF, render=render)
#     _org = detect_ners(section=subdoc, render=render)
#   except ValueError as e:
    
#     # Most likely, section not found
    
#     print('detect_org_name WARNING: {}, fallback to fuzzy solution'.format(e))
#     _head = _get_document_head_having_org_name(_doc.normal_text)
#     _head.embedd(NerPF)
#     _section = _detect_org_name_section(_head, render=render)
#     _org = detect_ners(_section, render=render)

#   return _org, _headline_indexes, _embedded_headlines



# #TESTING
# # ------------------------------------------------------------------------------  
# if dev_mode:
  
#   _doc = CharterDocument(tiny_charter_sample)
#   _doc.right_padding = 0
#   _doc.parse()
  
#   _org,  _headline_indexes, _embedded_headlines = detect_org_name(_doc, render=True)
#   render_org(_org)

"""## Margin values detection

#### Rendering
"""

def value_to_html(vc: ValueConstraint):
  color = '#333333'
  if vc.sign > 0:
    color = '#993300'
  elif vc.sign < 0:
    color = '#009933'

  return f'<b style="color:{color}">{sign_to_text(vc.sign)} {vc.currency} {vc.value:20,.2f}</b> '


def _render_sentence(sentence):
  html = ""
  constraints:List[ValueConstraint] = sentence['constraints']
  for c in constraints:
    html += value_to_html(c)

  if len(constraints) > 0:
    html += '<div style="border-bottom:1px solid #ccc; margin-top:1em"></div>'
    section = sentence['subdoc']
    html += to_color_text(section.tokens, section.distances_per_pattern_dict['deal_value_attention_vector'])
  return html



def render_constraint_values(rz):
  html = ''
  for head_type in rz.keys():

    r_by_head_type = rz[head_type]

    html += '<hr style="margin-top: 45px">'
    html += '<i style="padding:0; margin:0">решения о пороговых суммах, которые принимает</i><h2 style="color:{}; padding:0;margin:0">{}</h2>'.format(
      head_types_colors[head_type],
      head_types_dict[head_type])

    sentences = r_by_head_type['sentences']
    html += '<h4>{}</h4>'.format(r_by_head_type['caption'])
    html += '<div style="padding-left:80px">'

    if True:
      if len(sentences) > 0:
        for sentence in sentences:
          html += _render_sentence(sentence)

      else:
        html += '<h4 style="color:crimson">Пороговые суммы не найдены или не заданы</h4>'

    html += '</div>'

  return html



def sign_to_text(sign: int):
  if sign < 0: return " &lt; "
  if sign > 0: return " &gt; "
  return ' = '

"""### Tests

#### Test init
"""

if dev_mode:

  TCD = CharterDocument(TEST_CHARTER_TEXT)
  TCD.right_padding=0
  TCD.parse()

"""#### Проверка определения структуры дока"""

if dev_mode:
#   headline_indexes = TCD.structure.get_lines_by_level(0)
  
#   r = highlight_doc_structure(TCD)
  headline_indexes = TCD.structure.headline_indexes
  
  #--
  print('headline_indexes', headline_indexes)
  for i in headline_indexes:
    li = TCD.structure.structure[i] 
    _str = li.to_string(TCD.tokens_cc) 
     
    print(f'\t{li.level}\t#{li.number}\t->{li._possible_levels} \t {_str} ')
#     li.print(TCD.tokens_cc, )
#     line.print(TCD.tokens_cc)

"""##### Прям всех"""

import gc
if dev_mode and False:
  
  tf.logging.set_verbosity('FATAL')
  
  
  html=""
  i=1
  
  for fn in charters:
    
    
    gc.collect()
    
    _doc = CharterDocument(charters[fn])
    _doc.right_padding=0
    _doc.parse()
  
 
    lines_indexes = _doc.structure.headline_indexes
          
    
    html=f'<h3>{i}. {fn}</h3><ul>'
    i+=1
 
  
    prev_n=0
    for l in lines_indexes:      
      line = _doc.structure.structure[l]
      color='black'
      if  line.numbered and line.minor_number!=prev_n+1:
        color='red'
      html+=f'<li style="color:{color}">{ line.to_string(_doc.tokens_cc ) }</li>'
      if  line.numbered:
        prev_n = line.minor_number
    
    html+='</ul>'
    
    display(HTML(html))

"""#### Проверка эмбеддинга заголовков
Заголовки верхнего уровня
"""

if dev_mode:
  embedded_headlines = embedd_headlines(headline_indexes, TCD, HPF)
  for eh in embedded_headlines:
    print( untokenize(eh.tokens_cc))

"""#### Test apply semantics to headlines"""

if dev_mode:
#   best_indexes = map_headline_index_to_headline_type(headline_indexes, embedded_headlines, 1.4)
 
  best_indexes = match_headline_types(HPF.headlines, headline_indexes, embedded_headlines, 'headline.', 1.4)
  
  for bi in best_indexes:
    hl = best_indexes[bi]
    t=hl['headline.subdoc']
    print(bi)
    render_color_text(t.tokens_cc, hl['headline.attention_v'], _range=[0, 2])

  print()
  for bi in best_indexes:
    hl = best_indexes[bi]
    t=hl['headline.subdoc']
    print( '#{} \t {} \t {:.4f} \t {}'.format(hl['headline.index'], hl['headline.type'] + ('.' * (14-len(hl['headline.type']))), hl['headline.confidence'], untokenize(t.tokens_cc)))

"""##### (disabled)"""

import gc
if dev_mode and False:
  
  tf.logging.set_verbosity('FATAL')
  
  
  html=""
  i=1
  
  for fn in charters:
    
    
    gc.collect()
    
    _doc = CharterDocument(charters[fn])
    _doc.right_padding=0
    _doc.parse()
  
 
    lines_indexes = _doc.structure.headline_indexes
     
    
    embedded_headlines = embedd_headlines(lines_indexes, _doc, HPF)
#     best_indexes = map_headline_index_to_headline_type(lines_indexes, embedded_headlines, 'headline.name', 1.4)
     
         
    best_indexes = match_headline_types(HPF.headlines, lines_indexes, embedded_headlines, 'headline.', 1.4)
    
    ffound_html=""
    for bi in best_indexes:
      hl = best_indexes[bi]
      t=hl['headline.subdoc']
#       print(bi)
      ffound_html += to_color_text(t.tokens_cc, hl['headline.attention_v'], _range=[0, 2])

    meta_html="<h4>Найдены разделы:</h4>"
    for bi in best_indexes:
      hl = best_indexes[bi]
      t=hl['headline.subdoc']
      meta_html+=f'<div> #{hl["headline.index"]}  {hl["headline.type"] } confidence:{hl["headline.confidence"]:.4f} </div>'
#       print( '#{} \t {} \t {:.4f} \t {}'.format(hl['index'], hl['type'] + ('.' * (14-len(hl['type']))), hl['weight'], untokenize(t.tokens_cc)))


    
    
    
    html=f'<h3>{i}. {fn}</h3><ul>'
    i+=1
 
    html+=f'<div style="margin-left:2em">{meta_html}<br> {ffound_html}</div>'
  
    prev_n=0
    for l in lines_indexes:      
      line = _doc.structure.structure[l]
      color='black'
      if  line.numbered and line.minor_number!=prev_n+1:
        color='red'
      html+=f'<li style="color:{color}">{ line.to_string(_doc.tokens_cc ) }</li>'
      if  line.numbered:
        prev_n = line.minor_number
    
    html+='</ul>'
    
    display(HTML(html))

"""#### Test extract text sections under  headlines"""

if dev_mode:    
  

  def _____highlight_margin_numbers(_doc, ctx=None, relu_threshold=0.5):
#     attention_vector,_c = rectifyed_sum_by_pattern_prefix(_doc.distances_per_pattern_dict, 'sum_', relu_th=0.01)
    attention_vector,_c = rectifyed_sum_by_pattern_prefix(_doc.distances_per_pattern_dict, 'd_order_', relu_th=0.01)
    attention_vector=normalize(attention_vector)
#     attention_vector += make_soft_attention_vector(_doc, 'd_order_', relu_th=0.8, blur=180, norm=True)*0.6

    if ctx is not None:
      attention_vector += ctx


    estimated_threshold = estimate_threshold(attention_vector) * 0.6
  #   print('highlight_margin_numbers estimated_threshold=', estimated_threshold)
    attention_vector_r = relu(attention_vector, relu_th=estimated_threshold)

    return attention_vector_r, attention_vector


  for i in sections:
    print(i)
    s=sections[i]
    section_name=untokenize(s['headline.subdoc'].tokens_cc)

    
    subdoc = s['body.subdoc']
    print('='*100)      
    print( f'Section name: {section_name} {s}' )
    
#     print( untokenize(subdoc.tokens_cc)+' <<<<== '+s['type'])
#     print('-'*100)
        
    
    v1, v2 = highlight_margin_numbers( subdoc, ctx=None, relu_threshold=0.5)
    
    
#     order_attention_vector,_c = rectifyed_sum_by_pattern_prefix(subdoc.distances_per_pattern_dict, 'd_order_', relu_th=0.8)
    order_attention_vector = make_soft_attention_vector(subdoc, 'd_order_', relu_th=0.8, blur=2, norm=True)

    sum_attention_vector,_c = rectifyed_sum_by_pattern_prefix(subdoc.distances_per_pattern_dict, 'sum_', relu_th=0.6)
    
    
    fig = plt.figure(figsize=(20, 4))
    ax = plt.axes()
    ax.plot(sum_attention_vector, color='blue', label='sum_attention_vector');
    ax.plot(order_attention_vector, color='red', label='order_attention_vector');
    ax.plot(v1, color='green', label='v1');
#     ax.plot(distances[0:-_tail], alpha=0.6, color='black', label='distances');
#     ax.plot(attention_vector_neg[0:-_tail], alpha=0.3, color='red', label='attention_vector_neg');
#     ax.plot(orgs[0:-_tail], alpha=0.3, color='green', label='orgs');
    plt.title('margin_numbers contexts: "{}"'.format( untokenize(s['headline.subdoc'].tokens_cc[:9])) )
    plt.legend(loc='upper left')

    
    
    regions, _, _ = _find_sentences_by_attention_vector (subdoc, order_attention_vector, relu_th=0.8) 
    for start in regions:
      e=regions[start]
      print(start,e)
      render_color_text(subdoc.tokens_cc[start:e], order_attention_vector[start:e], _range=[0,1])
      
#     render_color_text(s['subdoc'].tokens_cc, v1)
      
#     print( untokenize( s['subdoc'].tokens_cc[0:200])+'.....<cut>')

"""##### Test extract constraint values from sub sections"""

if dev_mode:
  def ___test_x():  

  #   # parse
  #   _charter_doc = CharterDocument(txt)
  #   _charter_doc.right_padding = 0
  #   _charter_doc.parse()

    # 1. find top level structure
    #   headline_indexes = _charter_doc.structure.get_lines_by_level(0)

    headline_indexes = TCD.structure.headline_indexes
    print('headline_indexes',headline_indexes)

    # 2. embedd headlines
    embedded_headlines = embedd_headlines(headline_indexes, TCD, HPF)

    # 3. apply semantics to headlines,
    best_indexes = match_headline_types(HPF.headlines, headline_indexes, embedded_headlines, 'headline.', 1.4)

     # 4. find sections
    sections = find_sections_by_headlines(best_indexes,
                                          TCD,
                                          headline_indexes,
                                          render=True)




#     sections_filtered={}
#     prefix = 'head.all'
#     for k in sections:
#       if k[0:len(prefix)]==prefix:
#         sections_filtered[k]=sections[k]

    
    return sections
    
  sections= ___test_x()

# print (sections.keys())
# sect = sections['head.all']

# print (sect['body.subdoc'])
# print(sect['body.subdoc'].distances_per_pattern_dict)

# # sect = sections['head.all']
# rz = extract_constraint_values_from_sections({'head.all':sect})
# #     html = render_constraint_values(rz)
# #     display(HTML(html))

"""### extract_constraint_values_from_region"""

from typing import List

import nltk

from embedding_tools import embedd_tokenized_sentences_list
from legal_docs import LegalDocument, AbstractPatternFactory, extract_all_contraints_from_sentence
from charter_patterns import make_constraints_attention_vectors
from text_tools import untokenize
from transaction_values import extract_sum, ValueConstraint


def split_by_token(tokens: List[str], token):
  res = []
  sentence = []
  for i in tokens:
    if i == token:
      res.append(sentence)
      sentence = []
    else:
      sentence.append(i)
  
  res.append(sentence)
  return res


def _extract_constraint_values_from_region(sentenses_i, _embedd_factory, render=False):
  if sentenses_i is None or len(sentenses_i)==0:
    return []
  
  ssubdocs = embedd_generic_tokenized_sentences(sentenses_i, _embedd_factory)

  for ssubdoc in ssubdocs:

    vectors = make_constraints_attention_vectors(ssubdoc)
    ssubdoc.distances_per_pattern_dict = {**ssubdoc.distances_per_pattern_dict, **vectors}

    if render:
      render_color_text(
        ssubdoc.tokens,
        ssubdoc.distances_per_pattern_dict['deal_value_attention_vector'], _range=(0, 1))

  sentences = []
  for sentence_subdoc in ssubdocs:
    constraints: List[ValueConstraint] = extract_all_contraints_from_sentence(sentence_subdoc,
                                                                              sentence_subdoc.distances_per_pattern_dict[
                                                                                'deal_value_attention_vector'])

    sentence = {
      'quote': untokenize(sentence_subdoc.tokens_cc),
      'subdoc': sentence_subdoc,
      'constraints': constraints
    }

    sentences.append(sentence)
  return sentences


def embedd_generic_tokenized_sentences(strings: List[str], factory: AbstractPatternFactory) -> \
        List[LegalDocument]:
  embedded_docs = []
  if strings is None or len(strings)==0:
    return []

  tokenized_sentences_list = []
  for i in range(len(strings)):
    s = strings[i]

    words = nltk.word_tokenize(s)

    subdoc = LegalDocument()

    subdoc.tokens = words
    subdoc.tokens_cc = words

    tokenized_sentences_list.append(subdoc.tokens)
    embedded_docs.append(subdoc)

  sentences_emb, wrds, lens = embedd_tokenized_sentences_list(factory.embedder, tokenized_sentences_list)

  for i in range(len(embedded_docs)):
    l = lens[i]
    tokens = wrds[i][:l]

    line_emb = sentences_emb[i][:l]

    embedded_docs[i].tokens = tokens
    embedded_docs[i].tokens_cc = tokens
    embedded_docs[i].embeddings = line_emb
    embedded_docs[i].calculate_distances_per_pattern(factory)

  return embedded_docs


##---------------------------------------
def extract_constraint_values_from_section(section, verbose=False):
  _embedd_factory = PricePF

  if verbose:
    print('extract_constraint_values_from_sections', section['headline.type'])

  body = section['body.subdoc']

  if verbose:
    print('extract_constraint_values_from_sections', 'embedding....')

  sentenses_i = []
  senetences = split_by_token(body.tokens, '\n')
  for s in senetences:
    line = untokenize(s) + '\n'
    sum = extract_sum(line)
    if sum is not None:
      sentenses_i.append(line)
    if verbose:
      print('-', sum, line)

  hl_subdoc = section['headline.subdoc']

  r_by_head_type = {
    'section': head_types_dict[section['headline.type']],
    'caption': untokenize(hl_subdoc.tokens_cc),
    'sentences': _extract_constraint_values_from_region(sentenses_i, _embedd_factory, render=verbose)
  }

  return r_by_head_type


##---------------------------------------


def extract_constraint_values_from_sections(sections, verbose=False):
  rez = {}

  for head_type in sections:
    section = sections[head_type]
    rez[head_type] = extract_constraint_values_from_section(section, verbose)

  return rez

if dev_mode:
   # 4. find sections
    
  sections = find_sections_by_headlines(best_indexes,
                                        TCD,
                                        headline_indexes,
                                        render=False)
  sect_name='head.all'
  sect = sections[sect_name]
  print('H:', untokenize(sect['headline.subdoc'].tokens))
  print( sect['body.subdoc'].tokens)
  rz = extract_constraint_values_from_sections({sect_name:sect}, True)

    
#   html = render_constraint_values(rz)
#   display(HTML(html))

  for sentence in rz[sect_name]['sentences']:
    ssubdoc = sentence['subdoc']
  
    for k in ssubdoc.distances_per_pattern_dict:
      v=ssubdoc.distances_per_pattern_dict[k]
      print(k)
      render_color_text(
            ssubdoc.tokens, 
            v, _range=(0,1))

print (untokenize(TCD.tokens_cc))

"""## ~ALL together~"""

# MAIN METHOD
import gc

from legal_docs import CharterDocument, embedd_headlines

gc.collect()

import numpy as np


# ---------------------------------------
def find_contraints(sections, verbose=False):
 

  # 5. extract constraint values
  sections_filtered = {}
  prefix = 'head.'
  for k in sections:
    if k[:len(prefix)] == prefix:
      sections_filtered[k] = sections[k]
      

  rz = extract_constraint_values_from_sections(sections_filtered)
  return rz


# ---------------------------------------
def process_charter(txt, verbose=False ):
  # parse
  _charter_doc = CharterDocument(txt)
  _charter_doc.right_padding = 0
  _charter_doc.parse()

  # 1. find top level structure
  #   headline_indexes = _charter_doc.structure.get_lines_by_level(0)

  headline_indexes = _charter_doc.structure.headline_indexes
  print('headline_indexes',headline_indexes)

  # 2. embedd headlines
  embedded_headlines = embedd_headlines(headline_indexes, _charter_doc, HPF)

  # 3. apply semantics to headlines,
  best_indexes = match_headline_types(HPF.headlines, headline_indexes, embedded_headlines, 'headline.', 1.4)
  
   # 4. find sections
  sections = find_sections_by_headlines(best_indexes,
                                        _charter_doc,
                                        headline_indexes,
                                        render=verbose)

  #   org_subdoc = _doc_section_under_headline(_charter_doc, hl_struct, _headline_indexes, embedd_factory=NerPF, render=render)
  #   _org = detect_ners(section=org_subdoc)

  if 'name' in sections:
    org = detect_ners(section=sections['name']['body.subdoc'], render=verbose)
  else:
    org = {
      'type': 'org_unknown',
      'name': "не определено",
      'type_name': "не определено",
      'tokens': [],
      'attention_vector': []
    }

  rz  = find_contraints(sections, verbose)

  #   html = render_constraint_values(rz)
  #   display(HTML(html))

  return org, rz, _charter_doc


# -------------------------------------------------------------------------------------

# RENDER
def render_charter_parsing_results(org, rz):
  txt_html = to_color_text(org['tokens'], org['attention_vector'], _range=[0, 1])

  html = '<div style="background:#eeeeff; padding:0.5em"> recognized NE(s): <br><br> org type:<h3 style="margin:0">  {} </h3>org full name:<h2 style="margin:0">  {} </h2> <br>quote: <div style="font-size:90%; background:white">{}</div> </div>'.format(
    org['type_name'], org['name'], txt_html)
  # html+=txt_html
  html += render_constraint_values(rz)

  display(HTML(html))


# -------------------------------------------------------------------------------------
if dev_mode:
  # TESTING
  # -------------------------------------------------------------------------------------

  org, rz, _d = process_charter(TEST_CHARTER_TEXT, verbose=True)
  render_charter_parsing_results(org, rz)
  gc.collect()

REPORTED_DEPRECATED

"""# DEMO

## Upload
"""

tf.logging.set_verbosity('FATAL')

print_text = False  #@param {type: "boolean"}
analyze_immediately_after_upload = True  #@param {type: "boolean"}

docs=[]
if upload_enabled:
  #--------------------------
  docs = interactive_upload()
  #--------------------------


  if print_text:
    print(docs[0])
  
  
  if analyze_immediately_after_upload and upload_enabled:
    txt = docs[0]
    tf.logging.set_verbosity('FATAL')
    org, rz = process_charter(txt, verbose=False)
    html = render_charter_parsing_results(org, rz)



"""## Analyze"""

if upload_enabled:
  txt = docs[0]
  
  org, rz = process_charter(txt, verbose=False)
  render_charter_parsing_results(org, rz)



# raise Exeption("You'd better stop here, dude")

"""# BATCH
пакетный процессинг уставов, запись результатов в google sheets
"""

#@title Заполнение XLS таблицы { run: "auto", vertical-output: true, form-width: "650px", display-mode: "both" }

populate_names = False  #@param {type: "boolean"}
#@markdown - читает список файлов из папки и заносит их имена в первый столбец таблицы
start_from_row = 8  # @param {type: "integer"}
#@markdown - читает имена файлов из первого столбца начиная со строки  start_from_row (min=2)

if start_from_row < 2:
  raise Exception()

"""#### Populate filenames"""

print(f'read_docs_from_google_drive={read_docs_from_google_drive}')
print(f'run_batch_processing={run_batch_processing}')
print(f'populate_names={populate_names}')

worksheet = None

if run_batch_processing:    
  sh_name = 'Charter test results'
  worksheet = google_spread.open(sh_name).sheet1  
  
  
  if populate_names:
  #   worksheet.update_cell( 1, 1, "doc name")

    _row=2  

    # Populate document names
    for filename in sorted(charters):
      head, tail = os.path.split(filename)  
      worksheet.update_cell( _row, 1, tail)

      _row+=1

def _clean_row(worksheet, r, s, e, fill=''):
  for col in range(s, e + 1):
    worksheet.update_cell(r, col, fill)
  worksheet.update_cell(r, e, '-EOF-')


def _populate_rz(rz, r, worksheet, col):
  def _clean():
    _clean_row(worksheet, r, 3, 12)

  def _p(c, val):
    try:
      worksheet.update_cell(r, col + c, val)
    except:
      print(f'cannot update cell {r} {col+c} with value"{val}"')

  for head_type in rz:
    _clean()

    _p(7, head_types_dict[head_type])

    r_by_head_type = rz[head_type]

    sentences = r_by_head_type['sentences']
    caption = r_by_head_type['caption']
    _p(11, caption)
    r += 1

    for sentence in sentences:

      constraints: List[ValueConstraint] = sentence['constraints']

      if len(constraints) > 0:
        _p(11, sentence['quote'])

        for c in constraints:
          _p(8, c.value)
          _p(9, c.currency)
          _p(10, c.sign)
          r += 1
          _clean()

      else:
        _p(8, '')
        _p(9, '')
        _p(10, '- not found -')
        _p(11, '')

    r += 1
    _clean()

  return r

"""### run batch loop"""

PROF_DATA

import sys
import traceback

    
#------------------------------------------------------------------------------
 

print(f'run_batch_processing : {run_batch_processing}')
  
if run_batch_processing:
  
  
  def _populate_org(orginfo, the_row):
    worksheet.update_cell(the_row, col + 4, orginfo['name'])
    worksheet.update_cell(the_row, col + 5, orginfo['type_name'])
    worksheet.update_cell(the_row, col + 6, orginfo['type'])
    worksheet.update_cell(the_row, col + 11, untokenize(orginfo['tokens']))
    return the_row+1



  worksheet.update_cell(1, 1, "used CONFIG: {}:".format(str(hyperparameters)))
  
  
  # _row=3

  the_row = start_from_row
  clear_prof_data()

  col = 1
  for _row in range(start_from_row, 2 + len(charters)):

    def _clean():
      _clean_row(worksheet, the_row, 3, 11)


    print("-" * 120)
    short_fn = worksheet.cell(_row, 1).value

    try:
      the_row = int(worksheet.cell(_row, 2).value)
    except:
      worksheet.update_cell(_row, 2, the_row)
      
    _clean_row(worksheet, the_row, 3, 12)
    _clean_row(worksheet, the_row+1, 3, 12)
 

    filename = '/content/gdrive/My Drive/GazpromOil/Charters/' + short_fn
    print(_row, '-', the_row, filename)

    txt = charters[filename]

    _clean()
    
    worksheet.update_cell(the_row, col + 2, "{}: {}".format(_row, short_fn))
    worksheet.update_cell(the_row, col + 3, time.strftime("%Y-%m-%d %H:%M"))
    
    try:      
      
      orginfo, rz = process_charter(txt)  
#       print(rz)
#       print(orginfo)
       

      the_row = _populate_org(orginfo, the_row)
      _clean()
      the_row = _populate_rz(rz, the_row, worksheet, col)

    except Exception as e:
      _, _, tb = sys.exc_info()
      traceback.print_tb(tb) # Fixed format
      tb_info = traceback.extract_tb(tb)
      filename, line, func, text = tb_info[-1]

#         print('An error occurred on line {} in statement {}'.format(line, text))


      print("Unexpected error:", sys.exc_info())
      worksheet.update_cell(the_row, col + 11, f'-ERROR- {func} {line} {text} {sys.exc_info()}' )

    the_row += 1
    worksheet.update_cell(_row + 1, 2, the_row)

# filename = '/content/gdrive/My Drive/GazpromOil/Charters/' + 'Устав 2.docx'
  
# charter_text=charters[filename]
# print(charter_text)



"""# -- Debug (private)"""



"""## Render sections"""

#charter.calculate_distances_per_pattern(CharterPF)

bounds, weights = find_charter_head_sections(charter, verbose=True)


for head_type in bounds.keys(): 
  print("-"*120)
  print (head_types_dict[head_type])
  b = bounds[head_type]
  a = weights[head_type]
  
  html=""
  html+='<h2 style="color:{}; padding:0">{}</h2>'.format(
      head_types_colors[head_type],
      head_types_dict[head_type])
  display(HTML(html))
  
  
  render_color_text(charter.tokens[b[0]:b[1]], a[b[0]:b[1]], _range=[0,1])

# html = render_constraint_values (rz)

# display(HTML(html))

render_charter_parsing_results(org, rz)

"""## Fine-tuned Margin Value extractor"""

sample = """
принятие решений о совершении сделок ( в том числе нескольких взаимосвязанных сделок ) на сумму свыше 50 000 000 ( пятьдесят миллионов ) рублей без учета ндс ( или эквивалента указанной суммы в любой другой валюте ) , но не превышающую 100000000 ( сто миллионов ) рублей без учета ндс ( или эквивалент указанной суммы в любой другой валюте ) , а также о совершении сделок ( в том числе нескольких взаимосвязанных сделок ) с имуществом общества , стоимость которого на основании данных бухгалтерской отчетности общества за последний отчетный период , предшествующий дню принятия решения о совершении таких сделок , превышает 50 000 000 ( пятьдесят миллионов ) рублей без учета ндс ( или эквивалент указанной суммы в любой другой валюте ) , но не превышает 100 000 000 ( сто миллионов ) рублей без учета ндс ( или эквивалент указанной суммы в любой другой валюте ) , за исключением сделок , совершаемых в процессе обычной хозяйственной деятельности общества , а также , за исключением сделок с пао « газпром нефть » и обществами , входящими в группу лиц с ним 
"""



class ValuesPatternFactory(AbstractPatternFactory):
  
  def create_pattern(self, pattern_name, ppp):
    _ppp = (ppp[0].lower(), ppp[1].lower(), ppp[2].lower())
    fp = FuzzyPattern(_ppp, pattern_name)
    self.patterns.append(fp)
    self.patterns_dict[pattern_name] = fp
    return fp  
  
  def __init__(self, embedder):
    AbstractPatternFactory.__init__(self, embedder)
    
    self.patterns_dict={}
    
    self._build_sum_margin_extraction_patterns()
    self.embedd()
    
    
    self.sum__lt = None
    self.sum__gt = self.make_average_pattern('sum__gt_')
    
    try:
      self.sum__lt = self.make_average_pattern('sum__lt')
    except:
      print('NerPatternFactory: error')
    
    
  def _build_sum_margin_extraction_patterns(self):
    suffix = 'сто тысяч миллион долларов рублей евро'
    suffix2 = '0'
    prefix = 'сделка имеет стоимость '
 
    self.create_pattern('sum__lt_1',  (prefix, 'меньше', suffix))
    #less than
#     self.create_pattern('sum__lt_1',  (prefix + 'стоимость', 'не более 0', suffix))
#     self.create_pattern('sum__lt_2',  (prefix + 'цена', 'не больше 0', suffix))

#     self.create_pattern('sum__lt_3',  (prefix + 'стоимость', '<', suffix))
#     self.create_pattern('sum__lt_4',  (prefix + 'цена', 'менее', suffix))
#     self.create_pattern('sum__lt_4.1',(prefix + 'цена', 'ниже', suffix))
# #     self.create_pattern('sum__lt_5',  (prefix + 'стоимость', 'не может превышать 0', suffix))
# #     self.create_pattern('sum__lt_6',  (prefix + 'лимит соглашения', '0', suffix))
# #     self.create_pattern('sum__lt_7',  (prefix + 'верхний лимит стоимости', '0', suffix))
#     self.create_pattern('sum__lt_8',  (prefix,  'максимум', suffix))
#     self.create_pattern('sum__lt_9',  (prefix,  'до', suffix))
# #     self.create_pattern('sum__lt_10', (prefix,  'но не превышающую 0', suffix))
#     self.create_pattern('sum__lt_11', (prefix,  'пороговое значение', suffix))
    
    

    #greather than
#     self.create_pattern('sum__gt_1', (prefix + 'составляет', 'более', suffix))
    self.create_pattern('sum__gt_2', (prefix + '', 'превышает', suffix))
    self.create_pattern('sum__gt_6', (prefix + '', 'превышает совокупное пороговое значение', suffix))

    self.create_pattern('sum__gt_3', (prefix , 'больше', suffix))
    
#     self.create_pattern('sum__gt_4', (prefix + '', 'сделка имеет стоимость, равную или превышающую 0', suffix))
    
    
    
     

ValuesPF = ValuesPatternFactory(embedder) 



_subdoc = CharterDocument(sample)
_subdoc.parse()
_subdoc.embedd(ValuesPF)
_subdoc.calculate_distances_per_pattern(ValuesPF)

def x(section):

  relu_th=0.4
  v_lt = make_soft_attention_vector(section, 'sum__lt', relu_th=relu_th, blur=8)  
  v_lt = relu(v_lt, relu_th)

  v_gt = make_soft_attention_vector(section, 'sum__gt', relu_th=relu_th, blur=8)  
  v_gt = relu(v_gt, relu_th)

  v = make_soft_attention_vector(section, 'sum__', relu_th=relu_th, blur=8)  
  v = relu(v_gt, relu_th)

  
  tokens = section.tokens[0:len(v_gt)]
  
  print("GREATER")
  render_color_text(tokens, v_gt)

  print("LESS")
  render_color_text(tokens, v_lt)
  
  render_color_text(tokens, v)
  
  
  fig = plt.figure(figsize=(20, 6))
  ax = plt.axes()

  ax.plot(v_lt  , alpha=0.4, color='green');
  ax.plot(v_gt  , alpha=0.4, color='magenta');
  ax.plot( v  , alpha=0.9, color='red');
  
  
  att_v = v_lt
  
  results, points = extract_sums_from_tokens(tokens, att_v, verbose=True)
  print(points)
  print(extremums(att_v))
  for r in results:
    print(r['sum'], r['sentence'])

  
  
x(_subdoc)

"""# EXPeriments"""

_p={}
_p[0] = """Одобрение заключения, изменения или расторжения какой-либо сделки Общества, не указанной прямо в пункте 17.1 или настоящем пункте 22.5( за исключением крупной сделки в определении действующего законодательства Российской Федерации, которая подлежит одобрению Общим собранием участников в соответствии с настоящим Уставом или действующим законодательством Российской Федерации), если предметом такой сделки( a) является деятельность, покрываемая в Долгосрочном плане, и сделка имеет стоимость, равную или превышающую 2000000( два миллиона) долларов США, но менее 5000000( пяти миллионов) долларов США, либо( b) деятельность, не покрываемая в Долгосрочном плане, и сделка имеет стоимость, равную или превышающую 150000( сто пятьдесят тысяч) долларов США, но менее 500000( пятисот тысяч) долларов США;"""
_p[1] = """Сделки со связанной стороной, не включенной в список, стоимость которой равна или превышает 30000( тридцать тысяч) долларов США; либо"""
_p[2] = """Сделки со связанной стороной, включенной в список, стоимость которой равна или превышает 1500000( один миллион пятьсот тысяч) долларов США; либо"""
_p[3] = """Сделки со связанной стороной, включенной в список, стоимость которой равна или превышает 250000( двести пятьдесят тысяч) долларов США, но составляет менее 1500000( одного миллиона пятисот тысяч) долларов США; либо"""
_p[4] = """Сделки со связанной стороной, включенной в список, стоимость которой составляет менее 250000( двухсот пятидесяти тысяч) долларов США, если в соответствующем Финансовом году совокупная стоимость Сделок с включенными в список связанными сторонами со стоимостью менее 250000( двести пятьдесят тысяч) долларов США равна или превышает совокупное пороговое значение в 2000000( два миллиона) долларов США;"""
_p[5] = """Одобрение агентского договора, договора об оказании консультационных услуг или аналогичной договорённости, которые имеют стоимость равную или превышающую 1000000( один миллион) долларов США;"""
_p[6] = """Одобрение агентского договора, договора об оказании консультационных услуг или аналогичной договоренности, которые имеют стоимость равную или превышающую 100000( сто тысяч) долларов США, но менее 1000000( одного миллиона) долларов США;"""

"""## NER-2 testing

%%time
# filename = '/content/gdrive/My Drive/GazpromOil/Charters/' + 'Устав 2.docx'
# filename = '/content/gdrive/My Drive/GazpromOil/Charters/' + 'Устав_Рег. продажи авг 2018.docx'
# filename = '/content/gdrive/My Drive/GazpromOil/Charters/' + 'Новая редакция Устава.doc'
# filename = '/content/gdrive/My Drive/GazpromOil/Charters/' + 'Устав_Рег. продажи авг 2018.docx'
# filename = '/content/gdrive/My Drive/GazpromOil/Charters/' + '6.1.1(a) Project Tri-Neft - Sunrise Charter.docx'
filename = '/content/gdrive/My Drive/GazpromOil/Charters/' + 'Устав - ГПН-Транспорт_ГОСА-2018.docx'

  
if dev_mode or True:
  charter_text=charters[filename]
  # print(charter_text)

  headline_indexes=None
  embedded_headlines=None

  org = detect_org_name(charter_text, render=True)
  render_org(org)

#### ~garbage~
"""