# -*- coding: utf-8 -*-
"""Constraint values extraction from spread sample.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w5KNrKn6O4GFM5dFEspeIVEF-mUwHGm_

# Read test data
"""

#@title ## Settings { run: "auto", vertical-output: true, form-width: "750px", display-mode: "form" }
from charter_patterns import make_constraints_attention_vectors

hyperparameters={}



#@markdown ## - Embedding module
embeddings_layer='elmo'  #@param ["elmo", "word_emb" ]
database = "twitter" #@param ["wiki", "twitter", "news"]


hyperparameters['embeddings.layer']=embeddings_layer
hyperparameters ['database']=database
print()

print(str(hyperparameters))

import gspread
from google.colab import auth
# from google.colab import drive
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
google_spread = gspread.authorize(GoogleCredentials.get_application_default())


# drive.mount('/content/gdrive', force_remount=True)

sh_name = 'Charter test results'
worksheet = google_spread.open(sh_name).sheet1

SAMPLES=[]
_row=1
while True:
  value = worksheet.cell(_row, 11).value
  if value!='':
#     print(_row, value)
    SAMPLES.append(value)
  _row+=1
 
  if _row > 120 and value=='':
    break
  
print (SAMPLES)

print( ',\n'.join (SAMPLES) )

SAMPLES_CACHE = """
quote,
принятие решений о совершении сделок( в том числе нескольких взаимосвязанных сделок) на сумму, превышающую 100 000 000( сто миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), и сделок( в том числе нескольких взаимосвязанных сделок) с имуществом общества, стоимость которого на основании данных бухгалтерской отчетности общества за последний отчетный период, предшествующий дню принятия решения о совершении таких сделок, превышает 100 000 000( сто миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), за исключением сделок, совершаемых в процессе обычной хозяйственной деятельности общества, а также, за исключением сделок с пао « газпром нефть » и обществами, входящими в группу лиц с ним( за исключением случаев, когда такая сделка или несколько взаимосвязанных сделок является( -ются) сделкой, в совершении которой имеется заинтересованность);,
принятие решений о совершении сделок( в том числе нескольких взаимосвязанных сделок) на сумму свыше 50 000 000( пятьдесят миллионов) рублей без учета ндс( или эквивалента указанной суммы в любой другой валюте), но не превышающую 100000000( сто миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), а также о совершении сделок( в том числе нескольких взаимосвязанных сделок) с имуществом общества, стоимость которого на основании данных бухгалтерской отчетности общества за последний отчетный период, предшествующий дню принятия решения о совершении таких сделок, превышает 50 000 000( пятьдесят миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), но не превышает 100 000 000( сто миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), за исключением сделок, совершаемых в процессе обычной хозяйственной деятельности общества, а также, за исключением сделок с пао « газпром нефть » и обществами, входящими в группу лиц с ним;,
принятие решения о заключении обществом мирового соглашения по судебному делу с ценой иска на сумму свыше 50 000 000( пятидесяти миллионов) рублей без учета ндс или эквивалента указанной суммы в любой другой валюте( либо предметом которого является имущество, стоимость которого превышает 50000000( пятьдесят миллионов) рублей без учета ндс, и/или мирового соглашения, предполагающего выплату денежных средств, передачу имущества общества либо уменьшение/зачет сумм, причитающихся в пользу общества, на сумму свыше денежной суммы, эквивалентной 50000000( пятидесяти миллионам) рублей без учета ндс или эквивалента указанной суммы в любой другой валюте и/или мирового соглашения, предметом которого является имущество, стоимость которого превышает 50000000( пятьдесят миллионов) рублей.,
размер уставного капитала общества составляет 114 550 000( сто четырнадцать миллионов пятьсот пятьдесят тысяч) рублей.,
уставный капитал общества составляет 100000( сто тысяч) рублей.,
он составляется из номинальной стоимости размещенных 100 000( ста тысяч) обыкновенных именных акций номинальной стоимостью 1( один) рубль каждая.,
общество вправе размещать дополнительно к размещенным акциям обыкновенные именные акции в количестве 1 000000( один миллион) штук, номинальной стоимостью 1( один) рубль( объявленные акции).,
принятие решений о совершении сделок( в том числе нескольких взаимосвязанных сделок) на сумму свыше 50 000 000( пятидесяти миллионов) рублей( или эквивалента указанной суммы в любой другой валюте), но не превышающую 100000000( сто миллионов) рублей( или эквивалент указанной суммы в любой другой валюте), а также о совершении сделок( в том числе нескольких взаимосвязанных сделок) с имуществом общества, стоимость которого на основании данных бухгалтерской отчетности общества за последний отчетный период, предшествующий дню принятия решения о совершении таких сделок, превышает 50 000 000( пятьдесят миллионов) рублей( или эквивалент указанной суммы в любой другой валюте), но не превышает 100 000 000( сто миллионов) рублей( или эквивалент указанной суммы в любой другой валюте), за исключением случаев, когда одобрение указанных сделок относится к компетенции общего собрания участников общества, за исключением сделок, совершаемых в процессе обычной хозяйственной деятельности общества, а также, за исключением сделок с пао « газпром нефть » и обществами, входящими в группу лиц с ним;,
принятие решения о заключении обществом мирового соглашения по судебному делу с ценой иска на сумму свыше 50 000 000( пятидесяти миллионов) рублей без учета или эквивалента указанной суммы в любой другой валюте( либо предметом которого является имущество, стоимость которого превышает 50000000( пятьдесят миллионов) рублей без учета ндс, и/или мирового соглашения, предполагающего выплату денежных средств, передачу имущества общества либо уменьшение/зачет сумм, причитающихся в пользу общества, на сумму свыше денежной суммы, эквивалентной 50000000( пятидесяти миллионам) без учета ндс рублей или эквивалента указанной суммы в любой другой валюте и/или мирового соглашения, предметом которого является имущество, стоимость которого превышает 50000000( пятьдесят миллионов) рублей;,
принятие решений о совершении сделок( в том числе нескольких взаимосвязанных сделок) на сумму, превышающую 100 000 000( сто миллионов) рублей( или эквивалент указанной суммы в любой другой валюте), и сделок( в том числе нескольких взаимосвязанных сделок) с имуществом общества, стоимость которого на основании данных бухгалтерской отчетности общества за последний отчетный период, предшествующий дню принятия решения о совершении таких сделок, превышает 100 000 000( сто миллионов) рублей( или эквивалент указанной суммы в любой другой валюте), за исключением сделок, совершаемых в процессе обычной хозяйственной деятельности общества, а также, за исключением сделок с пао « газпром нефть » и обществами, входящими в группу лиц с ним, когда такая сделка или несколько взаимосвязанных сделок является( -ются) сделкой, в совершении которой имеется заинтересованность);,
26) принятие решений о совершении сделок( в том числе нескольких взаимосвязанных сделок) на сумму, превышающую 100000000( сто миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), и сделок( в том числе нескольких взаимосвязанных сделок) с имуществом общества, стоимость которого на основании данных бухгалтерской отчетности общества за последний отчетный период, предшествующий дню принятия решения о совершении таких сделок, превышает 100000000( сто миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), за исключением сделок, совершаемых в процессе обычной хозяйственной деятельности общества, а также, за исключением сделок с пао « газпром нефть » и обществами, входящими в группу лиц с ним когда такая сделка или несколько взаимосвязанных сделок является( -ются) сделкой, в совершении которой имеется заинтересованность);,
11) принятие решений о совершении сделок( в том числе нескольких взаимосвязанных сделок) на сумму, превышающую 50000000( пятьдесят миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте) но не превышающую 100000000( сто миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), и сделок( в том числе нескольких взаимосвязанных сделок) с имуществом общества, стоимость которого на основании данных бухгалтерской отчетности общества за последний отчетный период, предшествующий дню принятия решения о совершении таких сделок, превышает 50000000( пятьдесят миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), но не превышает 100000000( сто миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), за исключением сделок, совершаемых в процессе обычной хозяйственной деятельности общества, а также, за исключением сделок с пао « газпром нефть » и обществами, входящими в группу лиц с ним;,
27) принятие решения о заключении обществом мирового соглашения по судебному делу с ценой иска на сумму свыше 50 000 000( пятидесяти миллионов) рублей без учета ндс или эквивалента указанной суммы в любой другой валюте( либо предметом которого является имущество, стоимость которого превышает 50000000( пятьдесят миллионов) рублей без учета ндс, и/или мирового соглашения, предполагающего выплату денежных средств, передачу имущества общества либо уменьшение/зачет сумм, причитающихся в пользу общества, на сумму свыше денежной суммы, эквивалентной 50000000( пятидесяти миллионам) рублей без учета ндс или эквивалента указанной суммы в любой другой валюте и/или мирового соглашения, предметом которого является имущество, стоимость которого превышает 50000000( пятьдесят миллионов) рублей.,
уставный капитал общества составляет 157000( сто пятьдесят семь тысяч) рублей.,
11) принятие решений о совершении сделок( в том числе нескольких взаимосвязанных сделок) на сумму свыше 50 000 000( пятидесят миллионов) рублей без учета ндс( или эквивалента указанной суммы в любой другой валюте), но не превышающую 100000000( сто миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), а также о совершении сделок( в том числе нескольких взаимосвязанных сделок) с имуществом общества, стоимость которого на основании данных бухгалтерской отчетности общества за последний отчетный период, предшествующий дню принятия решения о совершении таких сделок, превышает 50 000 000( пятьдесят миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), но не превышает 100 000 000( сто миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), за исключением сделок, совершаемых в процессе обычной хозяйственной деятельности общества, а также, за исключением сделок с пао « газпром нефть » и обществами, входящими в группу лиц с ним;,
27) принятие решения о заключении обществом мирового соглашения по судебному делу с ценой иска на сумму свыше 50 000 000( пятидесяти миллионов) рублей без учета ндс или эквивалента указанной суммы в любой другой валюте( либо предметом которого является имущество, стоимость которого превышает 50000000( пятьдесят миллионов) рублей без учета ндс, и/или мирового соглашения, предполагающего выплату денежных средств, передачу имущества общества либо уменьшение/зачет сумм, причитающихся в пользу общества, на сумму свыше денежной суммы, эквивалентной 50000000( пятидесяти миллионам) рублей без учета ндс или эквивалента указанной суммы в любой другой валюте и/или мирового соглашения, предметом которого является имущество, стоимость которого превышает 50000000( пятьдесят миллионов) рублей.,
26) принятие решений о совершении сделок( в том числе нескольких взаимосвязанных сделок) на сумму, превышающую 100 000 000( сто миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), и сделок( в том числе нескольких взаимосвязанных сделок) с имуществом общества, стоимость которого на основании данных бухгалтерской отчетности общества за последний отчетный период, предшествующий дню принятия решения о совершении таких сделок, превышает 100 000 000( сто миллионов) рублей без учета ндс( или эквивалент указанной суммы в любой другой валюте), за исключением сделок, совершаемых в процессе обычной хозяйственной деятельности общества, а также, за исключением сделок с пао « газпром нефть » и обществами, входящими в группу лиц с ним, когда такая сделка или несколько взаимосвязанных сделок является( -ются) сделкой, в совершении которой имеется заинтересованность);,
15) принятие решения о согласии на совершение или о последующем одобрении сделок, связанных с осуществлением денежных выплат и( или) приобретением, отчуждением и возможностью отчуждения, обременением и возможностью обременения обществом имущества, в рамках которых цена предложения или стоимость отчуждаемого имущества, определенная на момент совершения сделки, превышает в рамках одной сделки или нескольких взаимосвязанных сделок, заключенных в течение 6( шести) месяцев, в совокупности 50 000 000( пятьдесят миллионов) рублей или эквивалент данной суммы в иной валюте, за исключением случаев, когда такие сделки требуют получения согласия органов управления общества как крупные сделки и сделки с заинтересованностью, а также для сделок, одобряемых в соответствии с подпунктами 22) -26) пункта 11.2 настоящего устава, подпунктами 17) –22), 30) пункта 12.3 настоящего устава;,
16) принятие решения о начале/урегулировании любых судебных споров и разбирательств, цена иска по которым превышает 50 000 000( пятьдесят миллионов) рублей( или эквивалент в другой валюте) в том числе, подписание мирового соглашения, признание иска, отказ от иска, а также совершение любых других процессуальных действий, кроме судебных споров, принятие решения, в отношении которых отнесено к компетенции общего собрания участников общества;,
17) принятие решения о согласии на совершение или о последующем одобрении сделок, связанных с получением или предоставлением обществом займов, кредитов( включая вексельные обязательства), предоставлением гарантий и поручительств, иных обеспечений исполнения обязательств( кроме предоставления обеспечения в виде недвижимого имущества), получением банковских гарантий, если сумма сделки или нескольких взаимосвязанных сделок, заключенных в течение 6( шести) месяцев, превышает 25 000 000( двадцать пять миллионов) рублей или эквивалент данной суммы в иной валюте, за исключением случаев, когда такие сделки требуют получения согласия органов управления общества как крупные сделки и сделки с заинтересованностью;,
19) принятие решения о согласии на совершение или о последующем одобрении сделок, связанных с изменением способов исполнения обязательств( заключение договоров об отступном, новации и/или прощении долга), сделок, связанных с изменением сторон обязательств( договоров об уступке права требования и переводе долга), если сумма сделки или нескольких взаимосвязанных сделок, заключенных в течение 6( шести) месяцев, определенная на момент совершения сделки, превышает 25 000 000( двадцать пять миллионов) рублей или эквивалент в другой валюте, за исключением случаев, когда такие сделки требуют получения согласия органов управления общества как крупные сделки и сделки с заинтересованностью;,
29) утверждение кандидатур и договоров с лицами, привлекаемыми обществом для оказания обществу консультационных, информационных, юридических услуг, а также для проведения технического, организационного, кадрового аудита, иного анализа, проверки и оценки деятельности общества, если стоимость услуг превышает 1000000( один миллион) рублей или эквивалент данной суммы в иной валюте, за исключением случаев, когда такие сделки требуют получения согласия органов управления общества как крупные сделки и сделки с заинтересованностью;,
• принятие решения о согласии на совершение или о последующем одобрении сделок, связанных с осуществлением денежных выплат и( или) приобретением, отчуждением и возможностью отчуждения, обременением и возможностью обременения обществом имущества, стоимость которого в рамках одной сделки или нескольких взаимосвязанных сделок в совокупности составляет от 1 000 000( одного) миллиона рублей до 50 000 000( пятьдесят миллионов) рублей или эквивалент данной суммы в иной валюте, за исключением случаев, когда такие сделки требуют получения согласия органов управления общества в соответствии с законом и уставом;,
3. нецелевое расходование обществом денежных средств( расходование не в соответствии с утвержденным бизнес-планом или бюджетом) при совокупности следующих условий:( i) размер таких нецелевых расходов в течение 6( шести) месяцев превышает 25 000 000( двадцать пять миллионов) рублей или эквивалент данной суммы в иной валюте,( ii) такие расходы не были в последующем одобрены советом директоров в течение 1( одного) года с момента, когда нецелевые расходы превысили вышеуказанную сумму и( iii) генеральным директором не было получено предварительное одобрение на такое расходование от представителей участников, уполномоченных голосовать на общем собрании участников общества;,
6. совершение сделок или нескольких взаимосвязанных сделок в течение 6( шести) месяцев( в том числе, сделок, совершаемых в процессе обычной хозяйственной деятельности общества), в рамках которых цена предложения или стоимость отчуждаемого имущества, определенная на момент совершения сделки, составляет более 50000000( пятидесяти миллионов) рублей или эквивалент данной суммы в иной валюте, требующих в соответствии с действующим законодательством и( или) уставом согласия совета директоров и( или) общего собрания участников общества, в отсутствие необходимого согласия, если такая сделка не была в последующем одобрена уполномоченным органом управления общества( советом директоров и( или) общим собранием участников общества) в течение 1( одного) года с момента ее совершения, при условии, что генеральным директором не было получено согласие от представителей участников, уполномоченных голосовать на общем собрании участников общества;,
7. совершение сделок или нескольких взаимосвязанных сделок в течение 6( шести) месяцев( в том числе, сделок, совершаемых в процессе обычной хозяйственной деятельности общества), связанных с выдачей и получением обществом займов, кредитов и поручительств, если сумма сделки или нескольких взаимосвязанных сделок, определенная на момент совершения сделки, превышает 25 000 000( двадцать пять миллионов) рублей или эквивалент данной суммы в иной валюте, требующих в соответствии с действующим законодательством и( или) уставом согласия совета директоров и( или) общего собрания участников общества, в отсутствие необходимого согласия, если такая сделка не была в последующем одобрена уполномоченным органом управления общества( советом директоров и( или) общим собранием участников общества) в течение 1( одного) года с момента ее совершения, при условии, что генеральным директором не было получено согласие от представителей участников, уполномоченных голосовать на общем собрании участников общества;,
8. совершение сделок или нескольких взаимосвязанных сделок в течение 6( шести) месяцев, в том числе, сделок, совершаемых в процессе обычной хозяйственной деятельности общества, о выдаче или получении обществом векселей, производстве по ним передаточных надписей, авалей, платежей, если сумма сделки или нескольких взаимосвязанных сделок, определенная на момент совершения сделки, превышает 25 000 000( двадцать пять миллионов) рублей или эквивалент данной суммы в иной валюте, требующих в соответствии с действующим законодательством и( или) уставом согласия совета директоров и( или) общего собрания участников общества, в отсутствие необходимого согласия;,
13. заключение договоров об отступном, новации и/или прощении долга, договоров об уступке права требования и переводе долга, если сумма сделки или нескольких взаимосвязанных сделок, заключенных в течение 6( шести) месяцев, определенная на момент совершения сделки, превышает 25 000 000( двадцать пять миллионов) рублей или аналог в другой валюте, требующих в соответствии с действующим законодательством и( или) уставом согласия совета директоров и( или) общего собрания участников общества, в отсутствие необходимого согласия;,
15. начало/урегулирование любых судебных споров( включая споров с аффилированными лицами участников), цена иска по которым превышает 50000 000( пятьдесят миллионов) рублей( или эквивалент в другой валюте), подписание мирового соглашения, признание иска, отказ от иска, а также любые другие процессуальные действия, требующие в соответствии с действующим законодательством и( или) уставом согласия совета директоров и( или) общего собрания участников общества, в отсутствие необходимого согласия, если такие действия не были в последующем одобрены уполномоченным органом управления общества( советом директоров и( или) общим собранием участников общества) в течение 1( одного) года с момента их совершения, при условии, что генеральным директором не было получено согласиеот представителей участников, уполномоченных голосовать на общем собрании участников общества;,
17. принятие компетентным судом решения о взыскании с генерального директора убытков, причиненных обществу его недобросовестными и/или неразумными действиями, в размере свыше 1 000 000( одного миллиона) рублей.,
одобрение заключения, изменения или расторжения какой-либо сделки общества по отчуждению активов общества( включая недвижимость, и исключая сделки по продаже или транспортировке газа и/или сырой нефти или по переработке газа), если такая сделка( либо балансовая стоимость активов общества, участвующих в такой сделке) имеет стоимость равную или превышающую 500 000( пятьсот тысяч) долларов сша;,
одобрение заключения, изменения или расторжения какой-либо сделки общества по отчуждению активов общества( включая недвижимость, и исключая сделки по продаже или транспортировке газа и/или сырой нефти или по переработке газа), если такая сделка( либо балансовая стоимость активов общества, участвующих в такой сделке) имеет стоимость равную или превышающую 150000( сто пятьдесят тысяч) долларов сша, но менее 500000( пятисот тысяч) долларов сша;,
одобрение заключения, изменения или расторжения какой-либо сделки общества, не указанной прямо в пункте 17.1 устава или настоящем пункте 22.5( за исключением крупной сделки в определении действующего законодательства российской федерации, которая подлежит одобрению общим собранием участников в соответствии с настоящим уставом или действующим законодательством российской федерации), если предметом такой сделки( а) является деятельность, покрываемая в долгосрочном плане, и сделка имеет стоимость, равную или превышающую 5000000( пять миллионов) долларов сша, либо( b) является деятельность, не покрываемая в долгосрочном плане, и сделка имеет стоимость, равную или превышающую 500000( пятьсот тысяч) долларов сша;,
одобрение заключения, изменения или расторжения какой-либо сделки общества, не указанной прямо в пункте 17.1 или настоящем пункте 22.5( за исключением крупной сделки в определении действующего законодательства российской федерации, которая подлежит одобрению общим собранием участников в соответствии с настоящим уставом или действующим законодательством российской федерации), если предметом такой сделки( a) является деятельность, покрываемая в долгосрочном плане, и сделка имеет стоимость, равную или превышающую 2000000( два миллиона) долларов сша, но менее 5000000( пяти миллионов) долларов сша, либо( b) деятельность, не покрываемая в долгосрочном плане, и сделка имеет стоимость, равную или превышающую 150000( сто пятьдесят тысяч) долларов сша, но менее 500000( пятисот тысяч) долларов сша;,
сделки со связанной стороной, не включенной в список, стоимость которой равна или превышает 30000( тридцать тысяч) долларов сша; либо,
сделки со связанной стороной, не включенной в список, стоимость которой составляет менее 30000( тридцати тысяч) долларов сша, если в соответствующем финансовому году совокупная стоимость сделок с не включенными в список связанными сторонами со стоимостью менее 30000( тридцати тысяч) долларов сша равна или превышает совокупное пороговое значение в 250000( двести пятьдесят) тысяч долларов сша; либо,
сделки со связанной стороной, включенной в список, стоимость которой равна или превышает 1500000( один миллион пятьсот тысяч) долларов сша; либо,
сделки со связанной стороной, включенной в список, стоимость которой равна или превышает 250000( двести пятьдесят тысяч) долларов сша, но составляет менее 1500000( одного миллиона пятисот тысяч) долларов сша; либо
"""

"""# Re-used code"""

import tensorflow as tf
import tensorflow_hub as hub

print(tf.__version__)
elmo = None

_database = hyperparameters ['database']
print('_database = ',_database)


_databases={
    #Twitter
    'twitter':'http://files.deeppavlov.ai/deeppavlov_data/elmo_ru-twitter_2013-01_2018-04_600k_steps.tar.gz',
                         
    
    #Russian WMT News
    'news':'http://files.deeppavlov.ai/deeppavlov_data/elmo_ru-news_wmt11-16_1.5M_steps.tar.gz',
            
    #Wikipedia
    'wiki':'http://files.deeppavlov.ai/deeppavlov_data/elmo_ru-wiki_600k_steps.tar.gz'
}


elmo = hub.Module(_databases[_database], trainable=False) #twitter

"""### Import from GitHub"""

!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/text_tools.py
!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/embedding_tools.py
!rm ml_tools.py  
!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/ml_tools.py
!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/text_normalize.py  
!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/patterns.py 
!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/transaction_values.py  

from transaction_values import *
from embedding_tools import *

# from split import *

!rm doc_structure.py  
!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/doc_structure.py 
!rm legal_docs.py  
!wget https://raw.githubusercontent.com/compartia/nlp_tools/structured_2/legal_docs.py  
from legal_docs import *
from doc_structure import *

"""## tools"""

REPORTED_MOVED={}
def at_github(fn):
  @wraps(fn)
  @wraps(fn)
  def with_reporting(*args, **kwargs):
    if fn.__name__ not in REPORTED_MOVED:
      REPORTED_MOVED[fn.__name__] = 1
      print("----WARNING!: function {} must be imported from github".format(fn.__name__) )
 
    ret = fn(*args, **kwargs)
    return ret

  return with_reporting

REPORTED_DEPRECATED={}
def deprecated(fn):
  @wraps(fn)
  @wraps(fn)
  def with_reporting(*args, **kwargs):
    if fn.__name__ not in REPORTED_DEPRECATED:
      REPORTED_DEPRECATED[fn.__name__] = 1
      print("----WARNING!: function {} is deprecated".format(fn.__name__) )
 
    ret = fn(*args, **kwargs)
    return ret

  return with_reporting

"""### Embedder"""

class ElmoEmbedder(AbstractEmbedder):

  def __init__(self, elmo):
    self.elmo = elmo
    self.config = tf.ConfigProto()
    self.config.gpu_options.allow_growth=True

  def embedd_tokenized_text(self, words, lens):
    with tf.Session(config=self.config) as sess:
      embeddings = self.elmo(
        inputs={
          "tokens": words,
          "sequence_len": lens
        },
        signature="tokens",
        as_dict=True)[ hyperparameters['embeddings.layer'] ]

      sess.run(tf.global_variables_initializer())
      out = sess.run(embeddings)
#       sess.close()


    return out, words

  def get_embedding_tensor(self, str, type=hyperparameters['embeddings.layer'], signature="default"):
    embedding_tensor = self.elmo(str, signature=signature, as_dict=True)[type]

    with tf.Session(config=self.config) as sess:
      sess.run(tf.global_variables_initializer())
      embedding = sess.run(embedding_tensor)
#       sess.close()

    return embedding


embedder = ElmoEmbedder(elmo)



"""## Rendering"""

import matplotlib as mpl
import matplotlib.pyplot as plt

from IPython.core.display import display, HTML

def render_org(org):
  txt_html = to_color_text(org['tokens'], org['attention_vector'], _range=[0,1])
  html = '<div style="background:#eeeeff; padding:0.5em"> recognized NE(s): <br><br> org type:<h3 style="margin:0">  {} </h3>org full name:<h2 style="margin:0">  {} </h2> <br>quote: <div style="font-size:90%; background:white">{}</div> </div>'.format( org['type_name'],org['name'], txt_html )
  display(HTML(html))
  
  
def to_color_text(tokens, weights, colormap='coolwarm', print_debug=False, _range=None):
  #   weights = _weights *-1
  if len(tokens)==0:
#     raise ValueError("don't know how to render emptiness")
    return " - empty -"
  if len(weights) != len(tokens):
    raise ValueError("number of weights differs weights={} tokens={}".format(len(weights), len(tokens)))

  #   if()
  vmin = weights.min()
  vmax = weights.max()

  if _range is not None:
    vmin = _range[0]
    vmax = _range[1]

  if print_debug:
    print(vmin, vmax)

  norm = mpl.colors.Normalize(vmin=vmin - 0.5, vmax=vmax)
  html = ""
  cmap = mpl.cm.get_cmap(colormap)

  for d in range(0, len(weights)):
    word = tokens[d]
    if word == ' ':
      word = '&nbsp;_ '
    
    html += '<span title="{} {:.4f}" style="background-color:{}">{} </span>'.format(
      d,
      weights[d],
      mpl.colors.to_hex(cmap(norm(weights[d]))),
      word)

    #     html+='<span style="background-color:' +mpl.colors.to_hex(cmap(norm(weights[d]) ))+ '">' + str(tokens[d]) + " </span>"
    if tokens[d] == '\n':
      html += "<br>"

  return html


def render_color_text(tokens, weights, colormap='coolwarm', print_debug=False, _range=None):
  html = to_color_text(tokens, weights, colormap, print_debug, _range)
  display(HTML(html))


def winning_patterns_to_html(_tokens, ranges, winning_patterns, _range,
                             colormaps=['Reds', 'Purples', 'Blues', 'Greens', 'Greys']):
  vmin = -ranges[1]
  vmax = -ranges[0]

  #     print("winning_patterns_to_html _range", _range, "min max=", ranges)

  norm = mpl.colors.Normalize(vmax=vmax, vmin=vmin)

  cmaps = []

  #     print (colormaps)
  for n in colormaps:
    cmap = mpl.cm.get_cmap(n)
    cmaps.append(cmap)

  html = ""

  for d in _range:
    winning_pattern_i = winning_patterns[d][0]
    colormap = cmaps[winning_pattern_i % len(colormaps)]
    normed = norm(-winning_patterns[d][1])
    color = mpl.colors.to_hex(colormap(normed))
    html += '<span title="' + '{} {:.2f}'.format(d, winning_patterns[d][
      1]) + '" style="background-color:' + color + '">' + str(
      _tokens[d]) + " </span>"
    if _tokens[d] == '\n':
      html += "<br>"

  return html


def _render_doc_subject_fragments(doc):
  #     print(doc.per_subject_distances)

  _html = ""
  if doc.per_subject_distances is not None:

    type = "Договор  благотворительного пожертвования"
    if doc.per_subject_distances[0] > doc.per_subject_distances[1]:
      type = "Договор возмездного оказания услуг"

    _html += "<h3>" + type + "</h3>"

    colormaps = ['PuRd'] * 5 + ['Blues'] * 7 + ['Greys']

    _html += "<h4> Предмет договора:</h4>"

    for region in [doc.subj_range]:
      _html += winning_patterns_to_html(_tokens=doc.tokens, ranges=doc.subj_ranges,
                                        winning_patterns=doc.winning_subj_patterns, _range=region,
                                        colormaps=colormaps)

  return _html


currencly_map = {
  'доллар': 'USD',
  'евро': 'EUR',
  'руб': 'RUR'
}


def sum_to_html(result, prefix=''):
  html = ""
  if result is None:
    html += '<h3 style="color:red">СУММА НЕ НАЙДЕНА</h3>'
  else:
    html += '<h3>{}{} {:20,.2f}</h3>'.format(prefix, currencly_map[result[1]], result[0])
  return html


def print_results(_doc, results=None):
  if results is None:
    results = _doc.found_sum

  result, (start, end), sentence, meta = results

  html = "<hr>"

  html += _render_doc_subject_fragments(_doc)

  html += sum_to_html(result)

  for key in meta.keys():
    html += '<div style="font-size:9px">' + str(key) + " = " + str(meta[key]) + "</div>"

  display(HTML(html))
  render_color_text(_doc.tokens[start:end], _doc.sums[start:end])


def render_sections(doc, weights):
  if weights is None:
    weights = np.zeros(len(doc.tokens))
    for subdoc in doc.subdocs:
      weights[subdoc.start] = 1

  fig = plt.figure(figsize=(20, 6))
  ax = plt.axes()
  ax.plot(weights, alpha=0.5, color='green', label='Sections');
  plt.title('Sections')

  for subdoc in doc.subdocs:
    print(subdoc.filename, '-' * 20)
    render_color_text(subdoc.tokens, weights[subdoc.start:subdoc.end], _range=[0, 1])

"""# CODE"""

import re

_re_less_then = re.compile(r'(до|менее|не выше|не превыша[а-я]{2,4})')
_re_greather_then = re.compile(r'(от|больше|более|свыше|выше|превыша[а-я]{2,4})')


def detect_sign(prefix: str):
  a = _re_less_then.findall(prefix)
  if len(a) > 0:
    return -1
  else:
    a = _re_greather_then.findall(prefix)
    if len(a) > 0:
      return +1
  return 0

"""## Patterns"""

from patterns import AbstractPatternFactory, FuzzyPattern


class PriceFactory(AbstractPatternFactory):

  def create_pattern(self, pattern_name, ppp):
    _ppp = (ppp[0].lower(), ppp[1].lower(), ppp[2].lower())
    fp = FuzzyPattern(_ppp, pattern_name)
    self.patterns.append(fp)
    self.patterns_dict[pattern_name] = fp
    return fp

  def __init__(self, embedder):
    AbstractPatternFactory.__init__(self, embedder)

    self.patterns_dict = {}
 
    self._build_order_patterns()
    self._build_sum_margin_extraction_patterns()
    self._build_sum_patterns()
    self.embedd()

  def _build_order_patterns(self):
    def cp(name, tuples):
      return self.create_pattern(name, tuples)

    prefix = 'принятие решения о согласии на совершение или о последующем одобрении'
    
    cp('d_order_4', (prefix, 'cделки', ', стоимость которой равна или превышает'))
    cp('d_order_5', (prefix, 'cделки', ', стоимость которой составляет менее'))
    
  def _build_sum_patterns(self):
    def cp(name, tuples):
      return self.create_pattern(name, tuples)
    suffix = 'млн. тыс. миллионов тысяч рублей долларов копеек евро'
    prefix = 'ринятие решений о совершении сделок '


    cp('sum_max1', (prefix + 'стоимость', 'не более 0', suffix))
    cp('sum_max2', (prefix + 'цена', 'не больше 0', suffix))
    cp('sum_max3', (prefix + 'стоимость <', '0', suffix))
    cp('sum_max4', (prefix + 'цена менее', '0', suffix))
    cp('sum_max5', (prefix + 'стоимость не может превышать', '0', suffix))  
    cp('sum_max6', (prefix + 'общая сумма может составить', '0', suffix))
    cp('sum_max7', (prefix + 'лимит соглашения', '0', suffix))
    cp('sum_max8', (prefix + 'верхний лимит стоимости', '0', suffix))
    cp('sum_max9', (prefix + 'максимальная сумма', '0', suffix))
    
     

  def _build_sum_margin_extraction_patterns(self):
    suffix = 'млн. тыс. миллионов тысяч рублей долларов копеек евро'
    prefix = 'совершение сделок '

    # less than
    self.create_pattern('sum__lt_1', (prefix + 'стоимость', 'не более 0', suffix))
    self.create_pattern('sum__lt_2', (prefix + 'цена', 'не больше 0', suffix))
    self.create_pattern('sum__lt_3', (prefix + 'стоимость', '< 0', suffix))
    self.create_pattern('sum__lt_4', (prefix + 'цена', 'менее 0', suffix))
    self.create_pattern('sum__lt_4.1', (prefix + 'цена', 'ниже 0', suffix))
    self.create_pattern('sum__lt_5', (prefix + 'стоимость', 'не может превышать 0', suffix))
    self.create_pattern('sum__lt_6', (prefix + 'лимит соглашения', '0', suffix))
    self.create_pattern('sum__lt_7', (prefix + 'верхний лимит стоимости', '0', suffix))
    self.create_pattern('sum__lt_8', (prefix, 'максимум 0', suffix))
    self.create_pattern('sum__lt_9', (prefix, 'до 0', suffix))
    self.create_pattern('sum__lt_10', (prefix, 'но не превышающую 0', suffix))
    self.create_pattern('sum__lt_11', (prefix, 'совокупное пороговое значение 0', suffix))

    # greather than
    self.create_pattern('sum__gt_1', (prefix + 'составляет', 'более 0', suffix))
    self.create_pattern('sum__gt_2', (prefix + '', 'превышает 0', suffix))
    self.create_pattern('sum__gt_3', (prefix + '', 'свыше 0', suffix))
    self.create_pattern('sum__gt_4', (prefix + '', 'сделка имеет стоимость, равную или превышающую 0', suffix))



PricePF = PriceFactory(embedder)

"""# Processing"""

def embedd_generic_tokenized_sentences(strings:List[str],  factory: AbstractPatternFactory ) -> \
        List[LegalDocument]:

  embedded_docs = []

  tokenized_sentences_list = []
  for i in range(len(strings)):
    s = strings[i]
    
    words = nltk.word_tokenize(s)

    subdoc = LegalDocument()
    
    subdoc.tokens=words
    subdoc.tokens_cc = words
    
 
    tokenized_sentences_list.append(subdoc.tokens)
    embedded_docs.append(subdoc)
  
  sentences_emb, wrds, lens = embedd_tokenized_sentences_list(factory.embedder, tokenized_sentences_list)
  
  
  for i in range(len(embedded_docs)):
    l = lens[i]
    tokens = wrds[i][:l]
 
    line_emb=sentences_emb[i][:l]
    
    embedded_docs[i].tokens =tokens
    embedded_docs[i].tokens_cc =tokens
    embedded_docs[i].embeddings = line_emb
    embedded_docs[i].calculate_distances_per_pattern(factory)
    

  return embedded_docs,lens


subdocs, lens = embedd_generic_tokenized_sentences(SAMPLES, PricePF)

print('='*80)
print(f'Average sentence len = {np.mean(lens)}')
print('='*80)

def cut_above(x, threshold):
  return threshold + relu(x *-1 + threshold) * -1

def make_constraints_attention_vectors(subdoc):
  value_attention_vector, _c1 = rectifyed_sum_by_pattern_prefix(subdoc.distances_per_pattern_dict, 'sum_max', relu_th=0.4)
  value_attention_vector = cut_above(value_attention_vector, 1)
  value_attention_vector = relu(value_attention_vector, 0.6)
  value_attention_vector = momentum(value_attention_vector, 0.7)
 

  deal_attention_vector, _c2 = rectifyed_sum_by_pattern_prefix(subdoc.distances_per_pattern_dict, 'd_order', relu_th=0.5)
  deal_attention_vector = cut_above(deal_attention_vector, 1)
  deal_attention_vector = momentum(deal_attention_vector, 0.993)
  
  
  margin_attention_vector, _c3 = rectifyed_sum_by_pattern_prefix(subdoc.distances_per_pattern_dict, 'sum__', relu_th=0.5)
  margin_attention_vector = cut_above(margin_attention_vector, 1)  
  margin_attention_vector = momentum(margin_attention_vector, 0.95)
  margin_attention_vector = relu(margin_attention_vector, 0.65)
  
#   margin_attention_vector/=_c3
  
  
  margin_value_attention_vector = relu ( (margin_attention_vector + value_attention_vector)/2, 0.6)
#   margin_value_attention_vector=relu(margin_value_attention_vector, 0.5)
  
  deal_value_attention_vector = (deal_attention_vector + margin_value_attention_vector)/2
  deal_value_attention_vector = relu(deal_value_attention_vector, 0.75)

  return {
    'value_attention_vector':value_attention_vector,
    'deal_attention_vector':deal_attention_vector,
    'deal_value_attention_vector':deal_value_attention_vector,
    'margin_attention_vector':margin_attention_vector,
    'margin_value_attention_vector':margin_value_attention_vector
  }





#-----------------------
# testing

for subdoc in subdocs:
  print('_'*40)
  embeddings_len=len(subdoc.embeddings)
  

  vectors = make_constraints_attention_vectors(subdoc)
  attention_vector_lt = soft_attention_vector(subdoc, 'sum__', blur=10, norm=True)

    
  render_color_text (subdoc.tokens_cc, vectors['deal_value_attention_vector'], _range=(0,1) )

"""### d"""

# from legal_docs import *
# from ml_tools import *


# # -------------------------------------------------------------------------------------------------------------
# # RENDERING


# def sign_to_text(sign: int):
#   if sign < 0: return " &lt; "
#   if sign > 0: return " &gt; "
#   return ' = '


# # -------------------------------------------------------------------------------------------------------------


# _re_less_then = re.compile(r'(до|менее|не выше|не превыша[а-я]{2,4})')
# _re_greather_then = re.compile(r'(от|больше|более|свыше|выше|превыша[а-я]{2,4})')


# def detect_sign(prefix: str):
#   a = _re_less_then.findall(prefix)
#   if len(a) > 0:
#     return -1
#   else:
#     a = _re_greather_then.findall(prefix)
#     if len(a) > 0:
#       return +1
#   return 0


# def cut_above(x, threshold):
#   return threshold + relu(x * -1 + threshold) * -1


# def make_constraints_attention_vectors(subdoc):
#   value_attention_vector, _c1 = rectifyed_sum_by_pattern_prefix(subdoc.distances_per_pattern_dict, 'sum_max',
#                                                                 relu_th=0.4)
#   value_attention_vector = cut_above(value_attention_vector, 1)
#   value_attention_vector = relu(value_attention_vector, 0.6)
#   value_attention_vector = momentum(value_attention_vector, 0.7)

#   deal_attention_vector, _c2 = rectifyed_sum_by_pattern_prefix(subdoc.distances_per_pattern_dict, 'd_order',
#                                                                relu_th=0.5)
#   deal_attention_vector = cut_above(deal_attention_vector, 1)
#   deal_attention_vector = momentum(deal_attention_vector, 0.993)

#   margin_attention_vector, _c3 = rectifyed_sum_by_pattern_prefix(subdoc.distances_per_pattern_dict, 'sum__',
#                                                                  relu_th=0.5)
#   margin_attention_vector = cut_above(margin_attention_vector, 1)
#   margin_attention_vector = momentum(margin_attention_vector, 0.95)
#   margin_attention_vector = relu(margin_attention_vector, 0.65)

#   margin_value_attention_vector = relu((margin_attention_vector + value_attention_vector) / 2, 0.6)

#   deal_value_attention_vector = (deal_attention_vector + margin_value_attention_vector) / 2
#   deal_value_attention_vector = relu(deal_value_attention_vector, 0.75)

#   return {
#     'value_attention_vector': value_attention_vector,
#     'deal_attention_vector': deal_attention_vector,
#     'deal_value_attention_vector': deal_value_attention_vector,
#     'margin_attention_vector': margin_attention_vector,
#     'margin_value_attention_vector': margin_value_attention_vector
#   }


# def split_by_number(tokens: List[str], attention: List[float], threshold):
#   # TODO: mind decimals!!

#   indexes = []
#   last_token_is_number = False
#   for i in range(len(tokens)):
#     if tokens[i].isdigit() and attention[i] > threshold:
#       if not last_token_is_number:
#         indexes.append(i)
#       last_token_is_number = True
#     else:
#       last_token_is_number = False

#   regions = []
#   bounds = []
#   if len(indexes) > 0:
#     for i in range(1, len(indexes)):
#       s = indexes[i - 1]
#       e = indexes[i]
#       regions.append(tokens[s:e])
#       bounds.append((s, e))

#     regions.append(tokens[indexes[-1]:])
#     bounds.append((indexes[-1], len(tokens)))
#   return regions, indexes, bounds


# currencly_map = {
#   'доллар': 'USD',
#   'евро': 'EUR',
#   'руб': 'RUR'
# }


# class ValueConstraint:
#   def __init__(self, value: float, currency: str, sign: int, context=None):
#     self.value = value
#     self.currency = currency
#     self.sign = sign
#     self.context = context


# def value_to_html(vc: ValueConstraint):
#   color = '#333333'
#   if vc.sign > 0:
#     color = '#993300'
#   elif vc.sign < 0:
#     color = '#009933'

#   return f'<b style="color:{color}">{sign_to_text(vc.sign)} {vc.currency} {vc.value:20,.2f}</b> '


# VALUE_SIGN_MIN_TOKENS = 4


# def extract_sum_and_sign(subdoc, b) -> ValueConstraint:
#   subtokens = subdoc.tokens_cc[b[0] - VALUE_SIGN_MIN_TOKENS:b[1]]
#   _prefix_tokens = subtokens[0:VALUE_SIGN_MIN_TOKENS + 1]
#   _prefix = untokenize(_prefix_tokens)
#   _sign = detect_sign(_prefix)
#   # ======================================
#   sum = extract_sum_from_tokens(subtokens)[0]
#   # ======================================

#   currency = "UNDEF"
#   value = np.nan
#   if sum is not None:
#     if sum[1] in currencly_map:
#       currency = currencly_map[sum[1]]
#     value = sum[0]
    
  
  
#   vc = ValueConstraint(value, currency, _sign)
#   return vc


# def extract_all_contraints_from_sentence(sentence_subdoc: LegalDocument, attention_vector: List[float]) -> List[
#   ValueConstraint]:
#   regions, indexes, bounds = split_by_number(sentence_subdoc.tokens, attention_vector, 0.2)

#   constraints = []
#   if len(indexes) > 0:

#     for b in bounds:
#       vc = extract_sum_and_sign(sentence_subdoc, b)
#       constraints.append(vc)

#   return constraints

# -------------------------------------------------------------------------------------------------------------
# RENDERING
from transaction_values import ValueConstraint


def sign_to_text(sign: int):
  if sign < 0: return " &lt; "
  if sign > 0: return " &gt; "
  return ' = '


# -------------------------------------------------------------------------------------------------------------


def value_to_html(vc: ValueConstraint):
  color = '#333333'
  if vc.sign > 0:
    color = '#993300'
  elif vc.sign < 0:
    color = '#009933'

  return f'<b style="color:{color}">{sign_to_text(vc.sign)} {vc.currency} {vc.value:20,.2f}</b> '


def __render(subdoc, attention_vector, colormap):
  regions, indexes, bounds = split_by_number(subdoc.tokens, attention_vector, 0.2)
  html = ''
  if len(indexes) > 0:

    html += to_color_text(subdoc.tokens[:indexes[0]], attention_vector[:indexes[0]], _range=[0, 1.2],
                          colormap=colormap) + ' .... <br>'

    shtml = ''

    for b in bounds:
      #       print(f'\t\t - { b}')
      shtml += '<br>  '

      vc = extract_sum_and_sign(subdoc, b)

      shtml += f'{value_to_html(vc)} '

      subtokens = subdoc.tokens_cc[b[0] - 4:b[1]]
      subvector = attention_vector[b[0] - 4:b[1]]
      shtml += to_color_text(subtokens, subvector, _range=[0, 1.2], colormap=colormap)
      # ------
    html += f'<div style="margin-left:3em; font-size:90%"> {shtml} </div>'

  display(HTML(html))


def __debug_attention_vectors(subdocs):
  i = 0

  ID = 2
  # ID=36
  for subdoc in subdocs[ID:ID + 1]:
    fig = plt.figure(figsize=(20, 6))
    ax = plt.axes()

    embeddings_len = len(subdoc.embeddings)
    print(f'subdoc.embeddings= {embeddings_len} \t tokens={len(subdoc.tokens)}')

    vectors = make_constraints_attention_vectors(subdoc)

    __render(subdoc, vectors['deal_value_attention_vector'], "Reds")

    for k in vectors:
      ax.plot(vectors[k], label=k, alpha=0.4);

    ax.plot(vectors['deal_value_attention_vector'], label="R", alpha=0.6, color='black');

    plt.title('margin_numbers "{}"'.format(i))
    plt.legend(loc='upper right')


__debug_attention_vectors(subdocs)

for subdoc in subdocs :
  vectors = make_constraints_attention_vectors(subdoc)
  
  print(i, '='*40)
  embeddings_len = len(subdoc.embeddings)
#   print(f'subdoc.embeddings= {embeddings_len} \t tokens={len(subdoc.tokens)}')

#   attention_vector_lt = soft_attention_vector(subdoc, 'sum__', blur=4, norm=True)
#   attention_vector_gt = soft_attention_vector(subdoc, 'sum__gt', blur=4, norm=True)

#   print('attention sum__')
  __render(subdoc, vectors['deal_value_attention_vector'], "coolwarm")
#   __render(subdoc, attention_vector_lt, "Blues")
  i += 1
#   print('GT')
#   __render(subdoc, attention_vector_gt, "Reds")

"""# Signs"""

for subdoc in subdocs:
  attention_vector = soft_attention_vector(subdoc, 'sum__', blur=4, norm=True)
  regions, indexes, bounds = split_by_number(subdoc.tokens, attention_vector, 0.2)
  if len(indexes) > 0:

    for b in bounds:
      left_offset = 3  # для слов типа "не превыщает"
      subtokens = subdoc.tokens_cc[b[0] - left_offset:b[1]]
      subvector = attention_vector[b[0] - left_offset:b[1]]

      prefix_tokens = subtokens[0:5]
      prefix = untokenize(prefix_tokens)

      a = detect_sign(prefix)
      print(sign_to_text(a), '\t', prefix)